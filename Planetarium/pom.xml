<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.revature</groupId>
	<artifactId>Planetarium</artifactId>
	<version>1.0</version>
	<packaging>jar</packaging>
	
	<properties>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	
	<dependencies>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>2.0.10</version>
		</dependency>
		<!--   gives us access to Selenium     -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>4.23.0</version>
		</dependency>
		<!--   gives us access to Junit4 to integrate with Cucumber     -->
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit</artifactId>
			<version>6.1.1</version>
			<scope>test</scope>
		</dependency>
		<!--    gives us access to Cucumber    -->
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java</artifactId>
			<version>6.1.1</version>
			<scope>test</scope>
		</dependency>
<!--		<dependency>-->
<!--			<groupId>org.xerial</groupId>-->
<!--			<artifactId>sqlite-jdbc</artifactId>-->
<!--			<version>3.45.2.0</version>-->
<!--		</dependency>-->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.2.20</version> <!-- or the latest version -->
		</dependency>
		<dependency>
			<groupId>io.javalin</groupId>
			<artifactId>javalin</artifactId>
			<version>6.1.3</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.13.4</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>5.12.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<!--
					The Surefire plugin is designed to be used for controlling your unit tests during
					the Maven build cycle. You can use it to specify what test classes should actually
					be used when running your tests. This is particularly useful when you are organizing
					your test classes by suites so that you don't have redundant test executions

					To trigger your tests via Maven you use the "mvn test" command. If you want to regenerate
					the content Maven creates you add "clean" to the start of the command, and maven will
					regenerate and replace/remove the old content created
				-->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.5.2</version>
				<configuration>
					<!--
						You can either tell Surefire to include or exclude test classes. Depending on
						your organization of your test files, you should pick the option that provides
						Surefire with the most information with the least amount of configuration required

						In this example, since the PlanetariumTestSuite tells Junit to run the tests in
						the repository and service layer, I can tell Surefire to only target the
						PlanetariumTestSuite class, and all my tests that are complete will execute a single
						time, as desired

						If instead I had a couple classes that needed to be excluded from the test run, I could
						wrap those files that hold the class data in excludes tags to tell Surefire not to
						include them in the test run
					-->
					<includes>
						<include>**/PlanetariumTestSuite.java</include>
<!--						<include>**/TestRunner.java</include>-->
					</includes>

					<!--					<excludes></excludes>-->
				</configuration>
			</plugin>
			<!--
				the site plugin provides Maven with the tools to create a website for your Java application. For our purposes,
				this plugin can turn the html report generated by the surefire report plugin into a more pleasing and easy to
				read html report. That being said, the website can be configured to include much more information about your
				project than just the test results
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.12.1</version>
			</plugin>
		</plugins>
	</build>
	<reporting>
		<plugins>
			<!--
				the surefire report plugin gives Maven the tools to create a html report of your test results from
				the maven surefire test results stored in the surefire reports directory. Combined with the sites plugin,
				this report can provide more detailed information about your tests then Jira/AIO can parse from your test results
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>3.5.2</version>
				<configuration>
					<outputName>PlanetariumTestResults</outputName>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

</project>
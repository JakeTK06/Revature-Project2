{
  "collection": {
    "_": {
      "postman_id": "68da6b7d-1399-4e16-8a04-7c9d19291c09",
      "exporter_id": "40730701",
      "collection_link": "https://kuiper-belt.postman.co/workspace/a93d590a-9df5-4179-8dd4-f57d09f5cd86/collection/40730660-68da6b7d-1399-4e16-8a04-7c9d19291c09?action=share&source=collection_link&creator=40730701"
    },
    "item": [
      {
        "id": "c2a28209-5463-4ba6-b534-17900d294161",
        "name": "Login",
        "description": {
          "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
            "name": "Login Positive",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}login"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "pm.test(\"Id should be returned\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.id).to.eql(1);\r",
                    "});\r",
                    "pm.test(\"Username should be returned\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                }
              }
            ]
          },
          {
            "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
            "name": "Login Negative (invalid username)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}login"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 401\", function () {\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "pm.test(\"Message should be invalid credentials\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                }
              }
            ]
          },
          {
            "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
            "name": "Login Negative (invalid password)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}login"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 401\", function () {\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "pm.test(\"Message should be invalid credentials\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                }
              }
            ]
          },
          {
            "id": "01d7055c-0689-4c26-9ac3-49215973824c",
            "name": "Login Negative (both invalid)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}login"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 401\", function () {\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "pm.test(\"Message should be invalid credentials\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                }
              }
            ]
          },
          {
            "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
            "name": "Logout",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}logout"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
        "name": "Registration",
        "description": {
          "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
            "name": "Register Positive",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {\r",
                    "    pm.response.to.have.status(201);\r",
                    "});\r",
                    "pm.test(\"Message is User created successfully\", function () {\r",
                    "    pm.response.to.have.body(\"User created successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                }
              }
            ]
          },
          {
            "id": "b18e1773-1dc0-4449-942c-19f43016554b",
            "name": "Register Negative (password length long fail)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid password\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                }
              }
            ]
          },
          {
            "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
            "name": "Register Negative (password length short fail)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid password\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                }
              }
            ]
          },
          {
            "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
            "name": "Register Negative (password start character fail)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid password\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                }
              }
            ]
          },
          {
            "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
            "name": "Register Negative (password character fail)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4090ceef-6279-44c0-9adf-603331832231",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid password\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                }
              }
            ]
          },
          {
            "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
            "name": "Register Negative (password uppercase constraint fail)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid password\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                }
              }
            ]
          },
          {
            "id": "2533f727-cbc5-4884-9487-894e862b1803",
            "name": "Register Negative (password lowercase constraint fail)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid password\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                }
              }
            ]
          },
          {
            "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
            "name": "Register Negative (password number constraint fail)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid password\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                }
              }
            ]
          },
          {
            "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
            "name": "Register Negative (non unique username)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid username\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                }
              }
            ]
          },
          {
            "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
            "name": "Register Negative (Username too short)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid username\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                }
              }
            ]
          },
          {
            "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
            "name": "Register Negative (Username too long)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid username\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                }
              }
            ]
          },
          {
            "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
            "name": "Register Negative (username doesn't start with letter)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid username\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                }
              }
            ]
          },
          {
            "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
            "name": "Register Negative (Username has invalid characters)",
            "request": {
              "url": {
                "host": [
                  "{{Base url}}register"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test(\"Message should be Invalid username\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6e1e79ae-532d-4a08-bfa5-ae5278ac33e0",
        "name": "View",
        "description": {
          "content": "tests related to User Story 3\n\nAs a user I want to see my planets and moons added to the Planetarium so I can track my findings",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "3fda9fb5-7c83-4882-887b-9cd483256a6b",
            "name": "Get Planets by Owner ID (ID = 1)",
            "request": {
              "url": {
                "path": [
                  "planet",
                  "owner",
                  "1"
                ],
                "host": [
                  "{{Base url}}planetarium"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": true,
                  "key": "JSESSIONID",
                  "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                }
              ],
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "80153c75-211f-4bb5-81d8-91898dc8ce6b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "const expectedResponse = [\r",
                    "    {\r",
                    "        \"planetId\": 1,\r",
                    "        \"planetName\": \"Earth\",\r",
                    "        \"ownerId\": 1,\r",
                    "        \"imageData\": \"{{EarthImage}}\"\r",
                    "    },\r",
                    "    {\r",
                    "        \"planetId\": 2,\r",
                    "        \"planetName\": \"Mars\",\r",
                    "        \"ownerId\": 1,\r",
                    "        \"imageData\": \"{{MarsImage}}\"\r",
                    "    }\r",
                    "]\r",
                    "\r",
                    "const responseBody = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "pm.test(\"Body is correct\", function () {\r",
                    "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                    "});"
                  ],
                  "_lastExecutionId": "2ac7267f-95a5-4f8c-b22d-0760075b39bf"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "b05016b8-f67b-451b-853f-3dcc0eb256f6",
            "name": "Get Planets by Owner ID (ID = 10) Not in DB",
            "request": {
              "url": {
                "path": [
                  "planet",
                  "owner",
                  "10"
                ],
                "host": [
                  "{{Base url}}planetarium"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": true,
                  "key": "JSESSIONID",
                  "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                }
              ],
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "74394cc7-adea-4aff-8c0f-6931a49c03a6",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "const expectedResponse = [\r",
                    "   \r",
                    "]\r",
                    "\r",
                    "const responseBody = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "pm.test(\"Body is correct\", function () {\r",
                    "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                    "});"
                  ],
                  "_lastExecutionId": "fcc7fbdc-c928-4cc7-8244-3ff4413475be"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "2c07b571-c548-4fd7-be0a-815507dd8b5c",
            "name": "Get Moon by Planet ID (ID = 1)",
            "request": {
              "url": {
                "path": [
                  "moon",
                  "owner",
                  "1"
                ],
                "host": [
                  "{{Base url}}planetarium"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": true,
                  "key": "JSESSIONID",
                  "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                }
              ],
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9d49cfad-93ff-44f3-8d91-b6cf53707308",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "const expectedResponse = [\r",
                    "    {\r",
                    "        \"moonId\": 1,\r",
                    "        \"moonName\": \"Luna\",\r",
                    "        \"ownerId\": 1,\r",
                    "        \"imageData\": \"{{LunaImage}}\"\r",
                    "    }\r",
                    "]\r",
                    "\r",
                    "const responseBody = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "pm.test(\"Body is correct\", function () {\r",
                    "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                    "});"
                  ],
                  "_lastExecutionId": "4361d87f-2ed8-4b8a-9784-d0618c8f68e3"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "f73a99cf-0e65-459d-82a0-e4db0c3f457d",
            "name": "Get Moon by Planet ID (ID = 10) Not in DB",
            "request": {
              "url": {
                "path": [
                  "moon",
                  "owner",
                  "10"
                ],
                "host": [
                  "{{Base url}}planetarium"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": true,
                  "key": "JSESSIONID",
                  "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                }
              ],
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d85ac456-f366-4b07-a48a-8c048da6e20b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "const expectedResponse = [\r",
                    "    \r",
                    "]\r",
                    "\r",
                    "const responseBody = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "pm.test(\"Body is correct\", function () {\r",
                    "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                    "});"
                  ],
                  "_lastExecutionId": "f78853f2-8966-4cd2-9837-9e23732ccf26"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "5af2b4f4-5123-43e9-ba50-175ab07e65f3",
        "name": "Create",
        "description": {
          "content": "tests related to User story 4\n\nAs a user I want to add new planets and moons to the Planetarium so I can update my findings",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
            "name": "Moon",
            "description": {
              "content": "tests related to moon creation",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
                "name": "Create Moon without image Positive",
                "request": {
                  "url": {
                    "path": [
                      "moon"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 201\", function () {\r",
                        "    pm.response.to.have.status(201);\r",
                        "});"
                      ],
                      "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                    }
                  }
                ]
              },
              {
                "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
                "name": "Create Moon with image Positive",
                "request": {
                  "url": {
                    "path": [
                      "moon"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 201\", function () {\r",
                        "    pm.response.to.have.status(201);\r",
                        "});\r",
                        "\r",
                        ""
                      ],
                      "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                    }
                  }
                ]
              },
              {
                "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
                "name": "Create Moon without image Negative (moon name invalid characters fail)",
                "request": {
                  "url": {
                    "path": [
                      "moon"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                    }
                  }
                ]
              },
              {
                "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
                "name": "Create Moon without image Negative (moon name unique fail)",
                "request": {
                  "url": {
                    "path": [
                      "moon"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                    }
                  }
                ]
              },
              {
                "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
                "name": "Create Moon without image Negative (moon name length short fail)",
                "request": {
                  "url": {
                    "path": [
                      "moon"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                    }
                  }
                ]
              },
              {
                "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
                "name": "Create Moon without image Negative (moon name length long fail)",
                "request": {
                  "url": {
                    "path": [
                      "moon"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                    }
                  }
                ]
              },
              {
                "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
                "name": "Create Moon without image Negative  (planet id fail)",
                "request": {
                  "url": {
                    "path": [
                      "moon"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                    }
                  }
                ]
              },
              {
                "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
                "name": "Create Moon with image Negative (invalid file format)",
                "request": {
                  "url": {
                    "path": [
                      "moon"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
            "name": "Planet",
            "description": {
              "content": "tests related to planet creation",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
                "name": "Create Planet without image data Positive",
                "request": {
                  "url": {
                    "path": [
                      "planet"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 201\", function () {\r",
                        "    pm.response.to.have.status(201);\r",
                        "});"
                      ],
                      "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                    }
                  }
                ]
              },
              {
                "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
                "name": "Create Planet with image data Positive",
                "request": {
                  "url": {
                    "path": [
                      "planet"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 201\", function () {\r",
                        "    pm.response.to.have.status(201);\r",
                        "});"
                      ],
                      "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                    }
                  }
                ]
              },
              {
                "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
                "name": "Create Planet with Invalid name (planet name length long fail)",
                "request": {
                  "url": {
                    "path": [
                      "planet"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                    }
                  }
                ]
              },
              {
                "id": "de653775-47c7-4e11-b084-05d61933ff72",
                "name": "Create Planet with Invalid name (planet name length short fail)",
                "request": {
                  "url": {
                    "path": [
                      "planet"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                    }
                  }
                ]
              },
              {
                "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
                "name": "Create Planet with Invalid name (planet name unique fail)",
                "request": {
                  "url": {
                    "path": [
                      "planet"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                    }
                  }
                ]
              },
              {
                "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
                "name": "Create Planet with Invalid name (planet name  character fail)",
                "request": {
                  "url": {
                    "path": [
                      "planet"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                    }
                  }
                ]
              },
              {
                "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
                "name": "Create Planet Negative (Invalid file type)",
                "request": {
                  "url": {
                    "path": [
                      "planet"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {\r",
                        "    pm.response.to.have.status(400);\r",
                        "});\r",
                        "\r",
                        "pm.test(\"Return message\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "29fe2d92-4abc-4569-bc7d-97a5acf6b1c9",
        "name": "Delete",
        "description": {
          "content": "Tests related to User Story 5\n\nAs a user I want to remove planets and moons from the Planetarium so I can correct my findings",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "da811c19-7740-4e14-a2c1-fec8ff326dc9",
            "name": "Planet",
            "description": {
              "content": "tests related to planet deletion",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "84693622-44ae-45fb-8c5e-8919451887da",
                "name": "Delete Planet Positive",
                "request": {
                  "url": {
                    "path": [
                      "planet",
                      "Earth"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "DELETE"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3cbadde-f556-46b8-a2fc-415e177239ba",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 204\", function () {\r",
                        "    pm.response.to.have.status(204);\r",
                        "});"
                      ],
                      "_lastExecutionId": "bc2b7bc5-1c0d-4ecc-9031-0ea509284157"
                    }
                  }
                ]
              },
              {
                "id": "9c9be228-0a1f-4fc1-85b1-2ebd3f54ccf7",
                "name": "Delete Planet Negative",
                "request": {
                  "url": {
                    "path": [
                      "planet",
                      "Planet Name That-is 1  long_name"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "DELETE"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2765d74a-e334-463e-b65b-e1401bb52cf9",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 404\", function () {\r",
                        "    pm.response.to.have.status(404);\r",
                        "});\r",
                        "pm.test(\"Your test name\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "a969f615-5937-4541-9218-cb50a15f2af5"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "f914076a-280b-4e54-b89d-05df0bc0a153",
            "name": "Moon",
            "description": {
              "content": "tests related to moon deletion",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "23dddb58-5686-4bf9-9362-4aa6166ef521",
                "name": "Delete Moon Negative",
                "request": {
                  "url": {
                    "path": [
                      "moon",
                      "xyz"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "DELETE",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c73a85a1-5cbe-4fb3-8dd1-4cb9dbcca7b8",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 404\", function () {\r",
                        "    pm.response.to.have.status(404);\r",
                        "});\r",
                        "pm.test(\"Your test name\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                        "});"
                      ],
                      "_lastExecutionId": "70e99897-37d6-4e82-bdcc-d9141c0bdce5"
                    }
                  }
                ]
              },
              {
                "id": "aa80108b-848a-40fd-8fd6-5c41468bdb00",
                "name": "Delete Moon Positive",
                "request": {
                  "url": {
                    "path": [
                      "moon",
                      "Luna"
                    ],
                    "host": [
                      "{{Base url}}planetarium"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "DELETE",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "820feada-1a46-4331-85d7-775d90727324",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Status code is 204\", function () {\r",
                        "    pm.response.to.have.status(204);\r",
                        "});"
                      ],
                      "_lastExecutionId": "72501878-64e1-4cde-9178-e1784bb90fd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "68da6b7d-1399-4e16-8a04-7c9d19291c09",
      "name": "Planetarium",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "This collection is for API Testing of the Planetarium application.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "6a5ed485-e83c-40c5-a77f-5ca439b9461f",
    "values": []
  },
  "globals": {
    "id": "677b99db-dc66-4161-8bec-df9634697060",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 42,
        "pending": 0,
        "failed": 4
      },
      "prerequests": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 41,
        "pending": 0,
        "failed": 41
      },
      "tests": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 68,
        "pending": 0,
        "failed": 68
      },
      "testScripts": {
        "total": 41,
        "pending": 0,
        "failed": 4
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1736963836925,
      "completed": 1736963840622
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 41,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "81409de6-7fa2-4af3-a98f-b9668404bf6d",
          "httpRequestId": "f7555acc-b14d-4f0c-a9cb-cd03b36a4cea"
        },
        "item": {
          "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
          "name": "Login Positive",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Id should be returned\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.id).to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Username should be returned\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                  "});"
                ],
                "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}login"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3da6035a-3b8e-4aba-a412-fd7674069df3",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}login",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}login"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Id should be returned",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Id should be returned",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Username should be returned",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Username should be returned",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bfb12fd5-a840-4cba-8ddf-181c237a7cdf",
          "length": 41,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff86b56a-a02b-4f30-945b-105d7381d7aa"
        },
        "item": {
          "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
          "name": "Login Negative (invalid username)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ],
                "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}login"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e55340b9-479f-463b-9a78-141e05e952ea",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}login",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}login"
        },
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 401",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Message should be invalid credentials",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be invalid credentials",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7b535b14-2ebf-4d6b-86b4-21a260faa886",
          "length": 41,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "884c827a-e4d4-489a-8827-52f8d3f4f730"
        },
        "item": {
          "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
          "name": "Login Negative (invalid password)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ],
                "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}login"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4efee798-3ad6-4c06-b312-0b96dee4aa9b",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}login",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}login"
        },
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 401",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Message should be invalid credentials",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be invalid credentials",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3a8a38eb-fd3b-4e98-8c87-8d355daa988f",
          "length": 41,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0f830a7-6231-4c09-b235-d30a989bdf6b"
        },
        "item": {
          "id": "01d7055c-0689-4c26-9ac3-49215973824c",
          "name": "Login Negative (both invalid)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ],
                "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}login"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "70e1ee84-9e56-4e34-845a-012e607120b3",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}login",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "01d7055c-0689-4c26-9ac3-49215973824c",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}login"
        },
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 401",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Message should be invalid credentials",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be invalid credentials",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d7143d8a-7e23-4e94-a3ba-df17278f7ee4",
          "length": 41,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8b8321bd-b67c-45d6-8805-f855df75bb91"
        },
        "item": {
          "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
          "name": "Logout",
          "request": {
            "url": {
              "host": [
                "{{Base url}}logout"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}logout"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "00cf9d16-2453-449d-b1ab-0bef844b118f",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}logout",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}logout"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "83eb7a20-b852-4618-b2cd-657789d59efe",
          "length": 41,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "219a2b19-5fc6-4df5-be2a-8ee7d9e438fc"
        },
        "item": {
          "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
          "name": "Register Positive",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Message is User created successfully\", function () {\r",
                  "    pm.response.to.have.body(\"User created successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d2ea26cd-0893-4375-b69a-274adab4b224",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Message is User created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Message is User created successfully",
              "message": "expected response body to equal 'User created successfully' but got undefined",
              "stack": "AssertionError: expected response body to equal 'User created successfully' but got undefined\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "aa532da4-617f-418f-a1b5-086a9e8ab221",
          "length": 41,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5f065aa2-c350-48ab-a144-db35e6b3a535"
        },
        "item": {
          "id": "b18e1773-1dc0-4449-942c-19f43016554b",
          "name": "Register Negative (password length long fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "52342d22-0b43-4d5d-92a7-033592ba30b2",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "b18e1773-1dc0-4449-942c-19f43016554b",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Message should be Invalid password",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid password",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "82df754d-c044-4a1d-851b-2ed362e96155",
          "length": 41,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "73c3e324-7164-4536-8774-77bd2e79cb4c"
        },
        "item": {
          "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
          "name": "Register Negative (password length short fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "91d0dd53-0514-4bcf-899e-e0a4486568f0",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Message should be Invalid password",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid password",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6f2f0517-cdd8-471c-b724-3a22a4d14f7c",
          "length": 41,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fa589c3e-29c5-45aa-8548-e70773b6c086"
        },
        "item": {
          "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
          "name": "Register Negative (password start character fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0c05c483-afd0-42f7-bf56-3b046ef580be",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Message should be Invalid password",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid password",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c3293fa0-d3be-4879-93a7-34a6d1d9302c",
          "length": 41,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0b9bd07e-89a4-439e-b285-a9ed653e6756"
        },
        "item": {
          "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
          "name": "Register Negative (password character fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4090ceef-6279-44c0-9adf-603331832231",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a7200091-7c5f-48df-ba71-d0627ff632c0",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Message should be Invalid password",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid password",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2f80a337-fa38-4584-811f-202ee761ac80",
          "length": 41,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2fed49e6-7acc-4188-a5b3-57a6709d365c"
        },
        "item": {
          "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
          "name": "Register Negative (password uppercase constraint fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6bb5cdfa-273b-4403-8f5a-bce11289c1b8",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Message should be Invalid password",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid password",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "03637ae7-426e-430f-ab88-b6d7c72f9855",
          "length": 41,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8b7e5f4b-6bde-4ca3-8108-e33fbf5e1e11"
        },
        "item": {
          "id": "2533f727-cbc5-4884-9487-894e862b1803",
          "name": "Register Negative (password lowercase constraint fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "56edee09-3bf4-47a9-bdb3-459decb0485c",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "2533f727-cbc5-4884-9487-894e862b1803",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Message should be Invalid password",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid password",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "05aa948f-2186-4250-873e-a20327d7dfca",
          "length": 41,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e3f90151-a54e-4883-adf4-3a3743bf8d2d"
        },
        "item": {
          "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
          "name": "Register Negative (password number constraint fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7e6852fe-6ae4-4d25-b608-358808703871",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Message should be Invalid password",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid password",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7ac2704c-b2d9-4c22-b26f-3190a51639f8",
          "length": 41,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "af8ad51c-8bb3-4d00-b496-385c628b0c37"
        },
        "item": {
          "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
          "name": "Register Negative (non unique username)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3cd45b06-4f4b-42ae-b3de-0368b087dbde",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Message should be Invalid username",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid username",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3d77a8df-bf01-47ef-89a1-e607aac59e2c",
          "length": 41,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "69e62842-12df-4a81-ab9e-8ff296b85fde"
        },
        "item": {
          "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
          "name": "Register Negative (Username too short)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8c950eef-46ae-4f23-a303-f2aad07a630c",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Message should be Invalid username",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid username",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "df56f717-1fd6-4a75-bde6-be1930191c46",
          "length": 41,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bd13aed1-8a2f-42c6-821c-cd5bfaffe4b8"
        },
        "item": {
          "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
          "name": "Register Negative (Username too long)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7ac85144-3d16-44ea-b29c-65c35185ecaa",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "Message should be Invalid username",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid username",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f8c97d2b-a5b5-41bc-82a0-9befb1406b4e",
          "length": 41,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c95c8af3-bd10-49a9-911a-588217a891b1"
        },
        "item": {
          "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
          "name": "Register Negative (username doesn't start with letter)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dd76321d-b466-4e84-a285-1e37ca8f5ecb",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Message should be Invalid username",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid username",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4a68e855-058a-4da9-bb79-9d72ba4cfb52",
          "length": 41,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3929a18d-9122-428c-bbae-45d6f07d123d"
        },
        "item": {
          "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
          "name": "Register Negative (Username has invalid characters)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{base url}}register"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c669b1f7-9f4f-41d6-abb7-4671b332d3c4",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}register",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "Message should be Invalid username",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message should be Invalid username",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d3a098d9-e1fe-4b60-9643-4e75dbffb808",
          "length": 41,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ee81b431-de3f-40ab-b3c7-e3be7a8b0a28"
        },
        "item": {
          "id": "3fda9fb5-7c83-4882-887b-9cd483256a6b",
          "name": "Get Planets by Owner ID (ID = 1)",
          "request": {
            "url": {
              "path": [
                "planet",
                "owner",
                "1"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80153c75-211f-4bb5-81d8-91898dc8ce6b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "    {\r",
                  "        \"planetId\": 1,\r",
                  "        \"planetName\": \"Earth\",\r",
                  "        \"ownerId\": 1,\r",
                  "        \"imageData\": \"{{EarthImage}}\"\r",
                  "    },\r",
                  "    {\r",
                  "        \"planetId\": 2,\r",
                  "        \"planetName\": \"Mars\",\r",
                  "        \"ownerId\": 1,\r",
                  "        \"imageData\": \"{{MarsImage}}\"\r",
                  "    }\r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ],
                "_lastExecutionId": "2ac7267f-95a5-4f8c-b22d-0760075b39bf"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet",
              "owner",
              "1"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "JSESSIONID",
              "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e3ac3b32-75a2-45fe-bf4e-02ddf80d39df",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "3fda9fb5-7c83-4882-887b-9cd483256a6b",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseBody' has already been declared",
              "checksum": "e4498a1e713b34c5058b087debe5bad4",
              "id": "c2c96116-c085-4957-94d4-e1dd227ce567",
              "timestamp": 1736963838632,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "14577003-08b7-4755-b097-b2060114e190",
          "length": 41,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4507208e-0313-4e49-a278-4fe99c147a04"
        },
        "item": {
          "id": "b05016b8-f67b-451b-853f-3dcc0eb256f6",
          "name": "Get Planets by Owner ID (ID = 10) Not in DB",
          "request": {
            "url": {
              "path": [
                "planet",
                "owner",
                "10"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74394cc7-adea-4aff-8c0f-6931a49c03a6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "   \r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ],
                "_lastExecutionId": "fcc7fbdc-c928-4cc7-8244-3ff4413475be"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet",
              "owner",
              "10"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "JSESSIONID",
              "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7cbd99f1-16fd-4f2a-be8c-595e11b2d9cc",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "b05016b8-f67b-451b-853f-3dcc0eb256f6",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseBody' has already been declared",
              "checksum": "e4498a1e713b34c5058b087debe5bad4",
              "id": "5d71d665-4f84-4f08-b2cb-d975621964a0",
              "timestamp": 1736963838727,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "85187705-f27a-4c1b-a6de-0d55d51a74c8",
          "length": 41,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "34dd8494-754b-46bb-ac9a-9912273d5b5a"
        },
        "item": {
          "id": "2c07b571-c548-4fd7-be0a-815507dd8b5c",
          "name": "Get Moon by Planet ID (ID = 1)",
          "request": {
            "url": {
              "path": [
                "moon",
                "owner",
                "1"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d49cfad-93ff-44f3-8d91-b6cf53707308",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "    {\r",
                  "        \"moonId\": 1,\r",
                  "        \"moonName\": \"Luna\",\r",
                  "        \"ownerId\": 1,\r",
                  "        \"imageData\": \"{{LunaImage}}\"\r",
                  "    }\r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ],
                "_lastExecutionId": "4361d87f-2ed8-4b8a-9784-d0618c8f68e3"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon",
              "owner",
              "1"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "JSESSIONID",
              "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bc1b4084-148a-47b8-b334-319171f12404",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "2c07b571-c548-4fd7-be0a-815507dd8b5c",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseBody' has already been declared",
              "checksum": "e4498a1e713b34c5058b087debe5bad4",
              "id": "65ebfcb0-3947-4a42-b724-ea4cfe0fc76f",
              "timestamp": 1736963838821,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0a9ad05d-d0c2-4a32-8ab8-5453769ac4f5",
          "length": 41,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fcbc80ac-01b2-4e47-a6cf-b0ba27f91f96"
        },
        "item": {
          "id": "f73a99cf-0e65-459d-82a0-e4db0c3f457d",
          "name": "Get Moon by Planet ID (ID = 10) Not in DB",
          "request": {
            "url": {
              "path": [
                "moon",
                "owner",
                "10"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d85ac456-f366-4b07-a48a-8c048da6e20b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "    \r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ],
                "_lastExecutionId": "f78853f2-8966-4cd2-9837-9e23732ccf26"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon",
              "owner",
              "10"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "JSESSIONID",
              "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "74f875a3-1866-4999-8b0b-9e44a184dde2",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "f73a99cf-0e65-459d-82a0-e4db0c3f457d",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseBody' has already been declared",
              "checksum": "e4498a1e713b34c5058b087debe5bad4",
              "id": "17278136-1bff-4c50-bf77-264f7569c049",
              "timestamp": 1736963838931,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "96734aa8-4d77-48b6-abe8-6c0e4485b797",
          "length": 41,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "997f06be-c691-4059-8589-6fdc49e07597"
        },
        "item": {
          "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
          "name": "Create Moon without image Positive",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});"
                ],
                "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "698f2561-a2f0-4a39-a813-dbf6b96e957c",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "61a1242e-bb15-4f71-9d6b-114d7df0d0e1",
          "length": 41,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "60ce7387-ef7e-4084-a4b1-e244b193874d"
        },
        "item": {
          "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
          "name": "Create Moon with image Positive",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3880bd72-9ba0-47b1-a7be-dc69f22bd421",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ef600aed-2fae-4705-9ec8-e9dbe3148aa0",
          "length": 41,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "71eb5be4-b566-4ab5-a03e-c6b9bd4d88cb"
        },
        "item": {
          "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
          "name": "Create Moon without image Negative (moon name invalid characters fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "518d4cf7-7105-4cb0-b7b1-1c740bab7724",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c261adac-d80b-4ba8-9112-39f3a6926990",
          "length": 41,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5acfb4db-30b8-4f23-8c07-68eefbfcb1f0"
        },
        "item": {
          "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
          "name": "Create Moon without image Negative (moon name unique fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "32c5ae8c-58fc-47da-9440-14bc3fde20f9",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "09dd7637-31a6-4179-9929-1528a6761c51",
          "length": 41,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ca295754-f5fc-438e-8bd8-422a064e0af5"
        },
        "item": {
          "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
          "name": "Create Moon without image Negative (moon name length short fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2c27b5ee-f66c-470e-89fd-3f6e4e9a7ab0",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ffd076e9-e48b-4c4d-b83a-17ddc471cdba",
          "length": 41,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f8c9ede4-d784-4a13-aed8-7ceff9246fd4"
        },
        "item": {
          "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
          "name": "Create Moon without image Negative (moon name length long fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d2326c1e-54b9-4be9-aefa-b71d841a7d16",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7962d0f0-c058-48d9-b9e6-bc775ec2b86f",
          "length": 41,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4e06f4c2-60f2-4430-bafb-100741a8eb75"
        },
        "item": {
          "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
          "name": "Create Moon without image Negative  (planet id fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                  "});"
                ],
                "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0900331c-c034-411f-a012-ead466841855",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b888f68a-5186-4532-93b9-b7f9c854affb",
          "length": 41,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "809660cf-2851-4246-b969-81249d9bace5"
        },
        "item": {
          "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
          "name": "Create Moon with image Negative (invalid file format)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                  "});"
                ],
                "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b8ec8e4a-0ed1-468f-999e-12820a727aac",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cab4ccf6-440d-4610-9f56-d6fc2ddae0ad",
          "length": 41,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "70e2c976-341e-4298-845d-7708736b8e0c"
        },
        "item": {
          "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
          "name": "Create Planet without image data Positive",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});"
                ],
                "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9992e322-c034-4178-894a-dcb07eb00682",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "afaaf4be-256b-435e-8bba-8da2ef866a18",
          "length": 41,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1b8ce1c7-34e4-4608-bc0f-a890b32c1063"
        },
        "item": {
          "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
          "name": "Create Planet with image data Positive",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});"
                ],
                "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1cd493cb-c079-44af-8e4b-fa3d7b7972dc",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c1615dd2-455e-47a7-87e2-110ce517cd66",
          "length": 41,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d46549d5-3088-43ff-9624-7af292d8ef20"
        },
        "item": {
          "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
          "name": "Create Planet with Invalid name (planet name length long fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f605a3b-c1b1-4241-984d-9c883947114c",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7a046aea-8420-4f5e-978b-457956923cde",
          "length": 41,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b5111cd2-3c60-4a49-93e5-9eb570f15b66"
        },
        "item": {
          "id": "de653775-47c7-4e11-b084-05d61933ff72",
          "name": "Create Planet with Invalid name (planet name length short fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "209e9993-a4c0-41ec-a384-1cfad0318d02",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "de653775-47c7-4e11-b084-05d61933ff72",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6b8935dc-d976-44a9-9007-6acaf0ce2a92",
          "length": 41,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "16fd383a-5ffc-410e-815d-5dd08af43940"
        },
        "item": {
          "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
          "name": "Create Planet with Invalid name (planet name unique fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b02684ad-bbc4-47af-aeec-90f9bda4e4c4",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2d10443e-42d6-49a8-85db-bf302d4504eb",
          "length": 41,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9fe7df4c-0eea-407b-afd4-680ca38a72af"
        },
        "item": {
          "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
          "name": "Create Planet with Invalid name (planet name  character fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "abb034a6-1078-4ef4-8d3f-9cefd8413841",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3d793469-5d47-465b-a7d7-6ad53ceae7b4",
          "length": 41,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8df802f5-9dd5-4850-ae57-1aa2c8b2582c"
        },
        "item": {
          "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
          "name": "Create Planet Negative (Invalid file type)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                  "});"
                ],
                "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ca4ae582-8208-4df3-81e0-875c13297e05",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "Return message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Return message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ab737ed5-7886-4aad-927d-1bc5bdfdf3e5",
          "length": 41,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5a1b624f-204a-47f5-bbb8-0dbfe8883fe5"
        },
        "item": {
          "id": "84693622-44ae-45fb-8c5e-8919451887da",
          "name": "Delete Planet Positive",
          "request": {
            "url": {
              "path": [
                "planet",
                "Earth"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3cbadde-f556-46b8-a2fc-415e177239ba",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "_lastExecutionId": "bc2b7bc5-1c0d-4ecc-9031-0ea509284157"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet",
              "Earth"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aa9ab9e7-4835-4468-b957-0e09c2f77aa6",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "84693622-44ae-45fb-8c5e-8919451887da",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 204",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 204",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ebb8f719-71eb-431f-bc61-15a55b5c3a08",
          "length": 41,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5a019a65-6699-4a0a-9df8-f74da7167a22"
        },
        "item": {
          "id": "9c9be228-0a1f-4fc1-85b1-2ebd3f54ccf7",
          "name": "Delete Planet Negative",
          "request": {
            "url": {
              "path": [
                "planet",
                "Planet Name That-is 1  long_name"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2765d74a-e334-463e-b65b-e1401bb52cf9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "a969f615-5937-4541-9218-cb50a15f2af5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "planet",
              "Planet%20Name%20That-is%201%20%20long_name"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d3085a22-f707-4404-9b30-256c81153526",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "9c9be228-0a1f-4fc1-85b1-2ebd3f54ccf7",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "Your test name",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Your test name",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ee9cb349-83f0-41d2-a8d6-0b8a3f96ff8e",
          "length": 41,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "47ab415e-90ac-4952-a43e-3bbd37e771fb"
        },
        "item": {
          "id": "23dddb58-5686-4bf9-9362-4aa6166ef521",
          "name": "Delete Moon Negative",
          "request": {
            "url": {
              "path": [
                "moon",
                "xyz"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c73a85a1-5cbe-4fb3-8dd1-4cb9dbcca7b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "70e99897-37d6-4e82-bdcc-d9141c0bdce5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon",
              "xyz"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "40d894a2-898d-4938-9b08-94c29618c9f7",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "23dddb58-5686-4bf9-9362-4aa6166ef521",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "Your test name",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Your test name",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "febe2e3b-3a34-4b9e-8964-2a407c823e28",
          "length": 41,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "74d95da7-5c25-46de-8016-6eaf242fc9bc"
        },
        "item": {
          "id": "aa80108b-848a-40fd-8fd6-5c41468bdb00",
          "name": "Delete Moon Positive",
          "request": {
            "url": {
              "path": [
                "moon",
                "Luna"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "820feada-1a46-4331-85d7-775d90727324",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "_lastExecutionId": "72501878-64e1-4cde-9178-e1784bb90fd6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "moon",
              "Luna"
            ],
            "host": [
              "{{base url}}planetarium"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f6933e3b-f8b9-4d25-b32e-06caa913b80c",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base url}}planetarium",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "aa80108b-848a-40fd-8fd6-5c41468bdb00",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium"
        },
        "assertions": [
          {
            "assertion": "Status code is 204",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 204",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}login",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}login",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}login\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "0704a83fc50a0b6be21303e88b7d4610",
          "id": "a6b18ffb-476a-40c8-83c8-78034bb7329b",
          "timestamp": 1736963837015,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
          "name": "Login Positive",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "3da6035a-3b8e-4aba-a412-fd7674069df3",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}login",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Id should be returned\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.id).to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Username should be returned\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 41,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "81409de6-7fa2-4af3-a98f-b9668404bf6d",
          "httpRequestId": "f7555acc-b14d-4f0c-a9cb-cd03b36a4cea"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "8f1a38fbb4708623aafe992d2647a097",
          "id": "15fc2195-67d2-4bdc-b865-25ae08cc991c",
          "timestamp": 1736963837036,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
          "name": "Login Positive",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Id should be returned\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.id).to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Username should be returned\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                  "});"
                ],
                "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
              }
            }
          ]
        },
        "parent": {
          "id": "c2a28209-5463-4ba6-b534-17900d294161",
          "name": "Login",
          "description": {
            "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
              "name": "Login Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Id should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.eql(1);\r",
                      "});\r",
                      "pm.test(\"Username should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                  }
                }
              ]
            },
            {
              "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
              "name": "Login Negative (invalid username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                  }
                }
              ]
            },
            {
              "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
              "name": "Login Negative (invalid password)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                  }
                }
              ]
            },
            {
              "id": "01d7055c-0689-4c26-9ac3-49215973824c",
              "name": "Login Negative (both invalid)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                  }
                }
              ]
            },
            {
              "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
              "name": "Logout",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}logout"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 41,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "81409de6-7fa2-4af3-a98f-b9668404bf6d",
          "httpRequestId": "f7555acc-b14d-4f0c-a9cb-cd03b36a4cea",
          "scriptId": "314b867b-db6d-41bc-850b-290f8287b34c",
          "execution": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Id should be returned",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "82b5bec63e1c019acb5b1d033969297d",
          "id": "b413cd03-c6a3-4a2d-b9ce-b16d7aeb9f6e",
          "timestamp": 1736963837037,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
          "name": "Login Positive",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Id should be returned\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.id).to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Username should be returned\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                  "});"
                ],
                "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
              }
            }
          ]
        },
        "parent": {
          "id": "c2a28209-5463-4ba6-b534-17900d294161",
          "name": "Login",
          "description": {
            "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
              "name": "Login Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Id should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.eql(1);\r",
                      "});\r",
                      "pm.test(\"Username should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                  }
                }
              ]
            },
            {
              "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
              "name": "Login Negative (invalid username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                  }
                }
              ]
            },
            {
              "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
              "name": "Login Negative (invalid password)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                  }
                }
              ]
            },
            {
              "id": "01d7055c-0689-4c26-9ac3-49215973824c",
              "name": "Login Negative (both invalid)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                  }
                }
              ]
            },
            {
              "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
              "name": "Logout",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}logout"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 41,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "81409de6-7fa2-4af3-a98f-b9668404bf6d",
          "httpRequestId": "f7555acc-b14d-4f0c-a9cb-cd03b36a4cea",
          "scriptId": "314b867b-db6d-41bc-850b-290f8287b34c",
          "execution": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Username should be returned",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "b0eb0337ff13b2ad815236e0e5dfe0a1",
          "id": "964f77ed-448e-42e4-b170-655e464affb0",
          "timestamp": 1736963837038,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
          "name": "Login Positive",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Id should be returned\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.id).to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Username should be returned\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                  "});"
                ],
                "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
              }
            }
          ]
        },
        "parent": {
          "id": "c2a28209-5463-4ba6-b534-17900d294161",
          "name": "Login",
          "description": {
            "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
              "name": "Login Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Id should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.eql(1);\r",
                      "});\r",
                      "pm.test(\"Username should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                  }
                }
              ]
            },
            {
              "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
              "name": "Login Negative (invalid username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                  }
                }
              ]
            },
            {
              "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
              "name": "Login Negative (invalid password)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                  }
                }
              ]
            },
            {
              "id": "01d7055c-0689-4c26-9ac3-49215973824c",
              "name": "Login Negative (both invalid)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                  }
                }
              ]
            },
            {
              "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
              "name": "Logout",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}logout"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 41,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "81409de6-7fa2-4af3-a98f-b9668404bf6d",
          "httpRequestId": "f7555acc-b14d-4f0c-a9cb-cd03b36a4cea",
          "scriptId": "314b867b-db6d-41bc-850b-290f8287b34c",
          "execution": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}login",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}login",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}login\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "0704a83fc50a0b6be21303e88b7d4610",
          "id": "5f9181c4-be60-4a27-89f3-07aa09a60e90",
          "timestamp": 1736963837118,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
          "name": "Login Negative (invalid username)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e55340b9-479f-463b-9a78-141e05e952ea",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}login",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "bfb12fd5-a840-4cba-8ddf-181c237a7cdf",
          "length": 41,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff86b56a-a02b-4f30-945b-105d7381d7aa"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 401",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "cfd1f1586431c0b1f54d36153b32aab0",
          "id": "09b2cfb4-c3f6-47d1-a604-1d2b130c48cf",
          "timestamp": 1736963837133,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
          "name": "Login Negative (invalid username)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ],
                "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
              }
            }
          ]
        },
        "parent": {
          "id": "c2a28209-5463-4ba6-b534-17900d294161",
          "name": "Login",
          "description": {
            "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
              "name": "Login Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Id should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.eql(1);\r",
                      "});\r",
                      "pm.test(\"Username should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                  }
                }
              ]
            },
            {
              "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
              "name": "Login Negative (invalid username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                  }
                }
              ]
            },
            {
              "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
              "name": "Login Negative (invalid password)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                  }
                }
              ]
            },
            {
              "id": "01d7055c-0689-4c26-9ac3-49215973824c",
              "name": "Login Negative (both invalid)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                  }
                }
              ]
            },
            {
              "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
              "name": "Logout",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}logout"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bfb12fd5-a840-4cba-8ddf-181c237a7cdf",
          "length": 41,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff86b56a-a02b-4f30-945b-105d7381d7aa",
          "scriptId": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
          "execution": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be invalid credentials",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "65dd31f65194e970c5c7b2c01c74245f",
          "id": "39ed8379-fa31-4337-b4d8-9bc28760e0dc",
          "timestamp": 1736963837134,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
          "name": "Login Negative (invalid username)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ],
                "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
              }
            }
          ]
        },
        "parent": {
          "id": "c2a28209-5463-4ba6-b534-17900d294161",
          "name": "Login",
          "description": {
            "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
              "name": "Login Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Id should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.eql(1);\r",
                      "});\r",
                      "pm.test(\"Username should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                  }
                }
              ]
            },
            {
              "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
              "name": "Login Negative (invalid username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                  }
                }
              ]
            },
            {
              "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
              "name": "Login Negative (invalid password)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                  }
                }
              ]
            },
            {
              "id": "01d7055c-0689-4c26-9ac3-49215973824c",
              "name": "Login Negative (both invalid)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                  }
                }
              ]
            },
            {
              "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
              "name": "Logout",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}logout"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bfb12fd5-a840-4cba-8ddf-181c237a7cdf",
          "length": 41,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff86b56a-a02b-4f30-945b-105d7381d7aa",
          "scriptId": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
          "execution": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}login",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}login",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}login\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "0704a83fc50a0b6be21303e88b7d4610",
          "id": "8c42b42a-4043-4ca1-aa28-a3cbf32690f4",
          "timestamp": 1736963837225,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
          "name": "Login Negative (invalid password)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "4efee798-3ad6-4c06-b312-0b96dee4aa9b",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}login",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "7b535b14-2ebf-4d6b-86b4-21a260faa886",
          "length": 41,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "884c827a-e4d4-489a-8827-52f8d3f4f730"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 401",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "c6a1ae24e50270204f7b746776934305",
          "id": "938a4a0d-d0a0-47e5-b507-7583ff4b1870",
          "timestamp": 1736963837242,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
          "name": "Login Negative (invalid password)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ],
                "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
              }
            }
          ]
        },
        "parent": {
          "id": "c2a28209-5463-4ba6-b534-17900d294161",
          "name": "Login",
          "description": {
            "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
              "name": "Login Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Id should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.eql(1);\r",
                      "});\r",
                      "pm.test(\"Username should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                  }
                }
              ]
            },
            {
              "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
              "name": "Login Negative (invalid username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                  }
                }
              ]
            },
            {
              "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
              "name": "Login Negative (invalid password)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                  }
                }
              ]
            },
            {
              "id": "01d7055c-0689-4c26-9ac3-49215973824c",
              "name": "Login Negative (both invalid)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                  }
                }
              ]
            },
            {
              "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
              "name": "Logout",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}logout"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7b535b14-2ebf-4d6b-86b4-21a260faa886",
          "length": 41,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "884c827a-e4d4-489a-8827-52f8d3f4f730",
          "scriptId": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
          "execution": "a86cf156-efff-4457-b501-d27ed07d61be"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be invalid credentials",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "4338b4e0ed66b6850fa2d4158207957c",
          "id": "2bc84c95-3025-4460-923d-4f02153cf2ed",
          "timestamp": 1736963837243,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
          "name": "Login Negative (invalid password)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ],
                "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
              }
            }
          ]
        },
        "parent": {
          "id": "c2a28209-5463-4ba6-b534-17900d294161",
          "name": "Login",
          "description": {
            "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
              "name": "Login Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Id should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.eql(1);\r",
                      "});\r",
                      "pm.test(\"Username should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                  }
                }
              ]
            },
            {
              "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
              "name": "Login Negative (invalid username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                  }
                }
              ]
            },
            {
              "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
              "name": "Login Negative (invalid password)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                  }
                }
              ]
            },
            {
              "id": "01d7055c-0689-4c26-9ac3-49215973824c",
              "name": "Login Negative (both invalid)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                  }
                }
              ]
            },
            {
              "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
              "name": "Logout",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}logout"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7b535b14-2ebf-4d6b-86b4-21a260faa886",
          "length": 41,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "884c827a-e4d4-489a-8827-52f8d3f4f730",
          "scriptId": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
          "execution": "a86cf156-efff-4457-b501-d27ed07d61be"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}login",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}login",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}login\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "0704a83fc50a0b6be21303e88b7d4610",
          "id": "8683e372-14a2-4df1-a13b-c03f0e3675e2",
          "timestamp": 1736963837319,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "01d7055c-0689-4c26-9ac3-49215973824c",
          "name": "Login Negative (both invalid)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "70e1ee84-9e56-4e34-845a-012e607120b3",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}login",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3a8a38eb-fd3b-4e98-8c87-8d355daa988f",
          "length": 41,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0f830a7-6231-4c09-b235-d30a989bdf6b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 401",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "a103c1f4a4f8c85b9dfdb51b7104cb99",
          "id": "29ddf784-7a42-4176-a57e-97e16bd0e78b",
          "timestamp": 1736963837323,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "01d7055c-0689-4c26-9ac3-49215973824c",
          "name": "Login Negative (both invalid)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ],
                "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
              }
            }
          ]
        },
        "parent": {
          "id": "c2a28209-5463-4ba6-b534-17900d294161",
          "name": "Login",
          "description": {
            "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
              "name": "Login Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Id should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.eql(1);\r",
                      "});\r",
                      "pm.test(\"Username should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                  }
                }
              ]
            },
            {
              "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
              "name": "Login Negative (invalid username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                  }
                }
              ]
            },
            {
              "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
              "name": "Login Negative (invalid password)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                  }
                }
              ]
            },
            {
              "id": "01d7055c-0689-4c26-9ac3-49215973824c",
              "name": "Login Negative (both invalid)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                  }
                }
              ]
            },
            {
              "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
              "name": "Logout",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}logout"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3a8a38eb-fd3b-4e98-8c87-8d355daa988f",
          "length": 41,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0f830a7-6231-4c09-b235-d30a989bdf6b",
          "scriptId": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
          "execution": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be invalid credentials",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "b60b2ea53a091e778cafb7054b6bf4ec",
          "id": "bb309613-be6f-49c5-8571-8c92727ae602",
          "timestamp": 1736963837323,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "01d7055c-0689-4c26-9ac3-49215973824c",
          "name": "Login Negative (both invalid)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}login"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Message should be invalid credentials\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                  "});"
                ],
                "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
              }
            }
          ]
        },
        "parent": {
          "id": "c2a28209-5463-4ba6-b534-17900d294161",
          "name": "Login",
          "description": {
            "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
              "name": "Login Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Id should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.eql(1);\r",
                      "});\r",
                      "pm.test(\"Username should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                  }
                }
              ]
            },
            {
              "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
              "name": "Login Negative (invalid username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                  }
                }
              ]
            },
            {
              "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
              "name": "Login Negative (invalid password)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                  }
                }
              ]
            },
            {
              "id": "01d7055c-0689-4c26-9ac3-49215973824c",
              "name": "Login Negative (both invalid)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                  }
                }
              ]
            },
            {
              "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
              "name": "Logout",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}logout"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3a8a38eb-fd3b-4e98-8c87-8d355daa988f",
          "length": 41,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0f830a7-6231-4c09-b235-d30a989bdf6b",
          "scriptId": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
          "execution": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}logout",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}logout",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}logout\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "8b3de07144ac40e3a0bf269c7abfb8c4",
          "id": "4f4b15d6-2ad4-4ed6-94e9-48e019b0d458",
          "timestamp": 1736963837396,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
          "name": "Logout",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}logout"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "00cf9d16-2453-449d-b1ab-0bef844b118f",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}logout",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d7143d8a-7e23-4e94-a3ba-df17278f7ee4",
          "length": 41,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8b8321bd-b67c-45d6-8805-f855df75bb91"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "069f20f87cf5d2c50296503d3aba1045",
          "id": "09cd1aa7-049f-475d-b245-135c756d3b2b",
          "timestamp": 1736963837402,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
          "name": "Logout",
          "request": {
            "url": {
              "host": [
                "{{Base url}}logout"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
              }
            }
          ]
        },
        "parent": {
          "id": "c2a28209-5463-4ba6-b534-17900d294161",
          "name": "Login",
          "description": {
            "content": "Tests related to User Story 2\n\nAs a user I want to securely access my account so I can interact with the Planetarium in a secure environment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a3ac658b-a713-4385-a7a5-ed7be9414b24",
              "name": "Login Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "314b867b-db6d-41bc-850b-290f8287b34c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Id should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.eql(1);\r",
                      "});\r",
                      "pm.test(\"Username should be returned\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.username).to.eql(\"Batman\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5da0d807-5473-4e88-9d8a-091f37bcaaf1"
                  }
                }
              ]
            },
            {
              "id": "a67e7206-189b-43b5-834f-6eefd7c63ace",
              "name": "Login Negative (invalid username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5fd19d1-70d4-4cd3-b405-c3e6bb118b46",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "73eaef62-7541-4ac1-a9e9-533f9961d8da"
                  }
                }
              ]
            },
            {
              "id": "96b8c11a-4d93-429e-8683-f053f4251ad0",
              "name": "Login Negative (invalid password)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab56332b-7c38-4183-bb1c-5f8e37575a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a86cf156-efff-4457-b501-d27ed07d61be"
                  }
                }
              ]
            },
            {
              "id": "01d7055c-0689-4c26-9ac3-49215973824c",
              "name": "Login Negative (both invalid)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}login"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{invalidLoginUsername}}\",\r\n    \"password\":\"{{invalidLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cc3f85e-b3b6-4fcb-bcc8-367757989c55",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test(\"Message should be invalid credentials\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"invalid credentials\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70bb7d22-93e6-46ee-9273-54efeaf5c485"
                  }
                }
              ]
            },
            {
              "id": "99de273c-6d46-4cb5-ba85-06ca521790a9",
              "name": "Logout",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}logout"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "JSESSIONID=node012o86ic1czrdwk7yrwqil13m19.node0; Path=/; HttpOnly; SameSite=Lax"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b813a173-c79c-404e-b16b-09d6402d3f11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d7143d8a-7e23-4e94-a3ba-df17278f7ee4",
          "length": 41,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8b8321bd-b67c-45d6-8805-f855df75bb91",
          "scriptId": "5e0ed849-6eaa-4c4e-b5bd-5b844e813e2f",
          "execution": "b813a173-c79c-404e-b16b-09d6402d3f11"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "c89f9341-92ae-4360-835b-ec04897ea8c0",
          "timestamp": 1736963837472,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
          "name": "Register Positive",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d2ea26cd-0893-4375-b69a-274adab4b224",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Message is User created successfully\", function () {\r",
                  "    pm.response.to.have.body(\"User created successfully\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "83eb7a20-b852-4618-b2cd-657789d59efe",
          "length": 41,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "219a2b19-5fc6-4df5-be2a-8ee7d9e438fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "7afe5b277d2c5b55ca3f4706001b2116",
          "id": "4bb906fd-f4a1-4bd0-85a5-dcd54a8e6d47",
          "timestamp": 1736963837475,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
          "name": "Register Positive",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Message is User created successfully\", function () {\r",
                  "    pm.response.to.have.body(\"User created successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "83eb7a20-b852-4618-b2cd-657789d59efe",
          "length": 41,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "219a2b19-5fc6-4df5-be2a-8ee7d9e438fc",
          "scriptId": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
          "execution": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Message is User created successfully",
          "message": "expected response body to equal 'User created successfully' but got undefined",
          "stack": "AssertionError: expected response body to equal 'User created successfully' but got undefined\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "df87c1cd0471d5365d92dd5ff26c4856",
          "id": "ed24841f-925d-41b0-89fe-2773befaad30",
          "timestamp": 1736963837476,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
          "name": "Register Positive",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Message is User created successfully\", function () {\r",
                  "    pm.response.to.have.body(\"User created successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "83eb7a20-b852-4618-b2cd-657789d59efe",
          "length": 41,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "219a2b19-5fc6-4df5-be2a-8ee7d9e438fc",
          "scriptId": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
          "execution": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "6552734a-1c2a-4dbf-890f-4986b98ccfbe",
          "timestamp": 1736963837547,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b18e1773-1dc0-4449-942c-19f43016554b",
          "name": "Register Negative (password length long fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "52342d22-0b43-4d5d-92a7-033592ba30b2",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "aa532da4-617f-418f-a1b5-086a9e8ab221",
          "length": 41,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5f065aa2-c350-48ab-a144-db35e6b3a535"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "5a1f2e088d2e110ed2bdfcf1f24d8f51",
          "id": "59cced19-40fc-4c26-bc30-c7e1512d104b",
          "timestamp": 1736963837564,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b18e1773-1dc0-4449-942c-19f43016554b",
          "name": "Register Negative (password length long fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "aa532da4-617f-418f-a1b5-086a9e8ab221",
          "length": 41,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5f065aa2-c350-48ab-a144-db35e6b3a535",
          "scriptId": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
          "execution": "347423fc-36cb-4609-8739-7c89083d024d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid password",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "eae63f9c6e6d6a20245c47c4ced091c0",
          "id": "76e567a4-03a8-4427-af4e-93e2d3c8c24e",
          "timestamp": 1736963837564,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b18e1773-1dc0-4449-942c-19f43016554b",
          "name": "Register Negative (password length long fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "aa532da4-617f-418f-a1b5-086a9e8ab221",
          "length": 41,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5f065aa2-c350-48ab-a144-db35e6b3a535",
          "scriptId": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
          "execution": "347423fc-36cb-4609-8739-7c89083d024d"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "3d38f49b-fcdf-4e27-aba3-7ae73e0bd500",
          "timestamp": 1736963837640,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
          "name": "Register Negative (password length short fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "91d0dd53-0514-4bcf-899e-e0a4486568f0",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "82df754d-c044-4a1d-851b-2ed362e96155",
          "length": 41,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "73c3e324-7164-4536-8774-77bd2e79cb4c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "e575f26e77a01743d516ea57ee14318a",
          "id": "5b055b3a-d8d0-4bf8-a592-788d23b7db34",
          "timestamp": 1736963837657,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
          "name": "Register Negative (password length short fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "82df754d-c044-4a1d-851b-2ed362e96155",
          "length": 41,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "73c3e324-7164-4536-8774-77bd2e79cb4c",
          "scriptId": "23929dc5-8a67-410c-b5e0-a5beac501153",
          "execution": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid password",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "0a93922823116c556140918c84618fad",
          "id": "e4cfa81f-ba3c-4d89-8b61-2f5203806a18",
          "timestamp": 1736963837658,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
          "name": "Register Negative (password length short fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "82df754d-c044-4a1d-851b-2ed362e96155",
          "length": 41,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "73c3e324-7164-4536-8774-77bd2e79cb4c",
          "scriptId": "23929dc5-8a67-410c-b5e0-a5beac501153",
          "execution": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "3b1a13b2-234c-4544-b33e-52a04d8c8e71",
          "timestamp": 1736963837733,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
          "name": "Register Negative (password start character fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "0c05c483-afd0-42f7-bf56-3b046ef580be",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "6f2f0517-cdd8-471c-b724-3a22a4d14f7c",
          "length": 41,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fa589c3e-29c5-45aa-8548-e70773b6c086"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "2452fe3a71f335381330003e18535803",
          "id": "632f601c-5b4e-4c73-b26c-05487a0a96bc",
          "timestamp": 1736963837750,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
          "name": "Register Negative (password start character fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f2f0517-cdd8-471c-b724-3a22a4d14f7c",
          "length": 41,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fa589c3e-29c5-45aa-8548-e70773b6c086",
          "scriptId": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
          "execution": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid password",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "9386f0797643b58a2508f5043adabb57",
          "id": "a509fb04-0d29-4ee6-b730-18baf16f208c",
          "timestamp": 1736963837750,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
          "name": "Register Negative (password start character fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f2f0517-cdd8-471c-b724-3a22a4d14f7c",
          "length": 41,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fa589c3e-29c5-45aa-8548-e70773b6c086",
          "scriptId": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
          "execution": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "298351d6-0417-439f-a432-cb542e7b4d1b",
          "timestamp": 1736963837824,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
          "name": "Register Negative (password character fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "a7200091-7c5f-48df-ba71-d0627ff632c0",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4090ceef-6279-44c0-9adf-603331832231",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c3293fa0-d3be-4879-93a7-34a6d1d9302c",
          "length": 41,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0b9bd07e-89a4-439e-b285-a9ed653e6756"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "f55d791b42ba9d2dfe088af3c9cec444",
          "id": "f98a38fe-0a09-447d-93fe-cc74093c9610",
          "timestamp": 1736963837841,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
          "name": "Register Negative (password character fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4090ceef-6279-44c0-9adf-603331832231",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c3293fa0-d3be-4879-93a7-34a6d1d9302c",
          "length": 41,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0b9bd07e-89a4-439e-b285-a9ed653e6756",
          "scriptId": "4090ceef-6279-44c0-9adf-603331832231",
          "execution": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid password",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "572c9ddff456c05aaddbab57b9d51b79",
          "id": "632693d5-2892-437d-a752-cf9fdb01f57c",
          "timestamp": 1736963837842,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
          "name": "Register Negative (password character fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4090ceef-6279-44c0-9adf-603331832231",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c3293fa0-d3be-4879-93a7-34a6d1d9302c",
          "length": 41,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0b9bd07e-89a4-439e-b285-a9ed653e6756",
          "scriptId": "4090ceef-6279-44c0-9adf-603331832231",
          "execution": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "96e44fe3-5d4d-4872-bb78-3b931d6b6245",
          "timestamp": 1736963837902,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
          "name": "Register Negative (password uppercase constraint fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "6bb5cdfa-273b-4403-8f5a-bce11289c1b8",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "2f80a337-fa38-4584-811f-202ee761ac80",
          "length": 41,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2fed49e6-7acc-4188-a5b3-57a6709d365c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "8f8ca1949ff754e89b91b04b3132a883",
          "id": "b232ec20-77ad-4271-9f07-b26732662eb6",
          "timestamp": 1736963837920,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
          "name": "Register Negative (password uppercase constraint fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2f80a337-fa38-4584-811f-202ee761ac80",
          "length": 41,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2fed49e6-7acc-4188-a5b3-57a6709d365c",
          "scriptId": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
          "execution": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid password",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "5697be487572bd6b9176cc53c7ccfc52",
          "id": "1f7ee500-0a49-4ab5-ab9a-2c2298a181fe",
          "timestamp": 1736963837920,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
          "name": "Register Negative (password uppercase constraint fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2f80a337-fa38-4584-811f-202ee761ac80",
          "length": 41,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2fed49e6-7acc-4188-a5b3-57a6709d365c",
          "scriptId": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
          "execution": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "7fbc13d5-575d-4adb-aa09-47a78a25dd9e",
          "timestamp": 1736963837995,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2533f727-cbc5-4884-9487-894e862b1803",
          "name": "Register Negative (password lowercase constraint fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "56edee09-3bf4-47a9-bdb3-459decb0485c",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "03637ae7-426e-430f-ab88-b6d7c72f9855",
          "length": 41,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8b7e5f4b-6bde-4ca3-8108-e33fbf5e1e11"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "cd6bedf6356a33873f977f204249cdff",
          "id": "9f9acd50-4c84-474d-82c6-e8743847ef77",
          "timestamp": 1736963838011,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2533f727-cbc5-4884-9487-894e862b1803",
          "name": "Register Negative (password lowercase constraint fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "03637ae7-426e-430f-ab88-b6d7c72f9855",
          "length": 41,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8b7e5f4b-6bde-4ca3-8108-e33fbf5e1e11",
          "scriptId": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
          "execution": "d39652c3-251a-4206-89e0-7cf1c1e34914"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid password",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "d664894345a4d669b8562c3aa1dff4ba",
          "id": "89c4a9fc-7b8a-44cb-bc4c-680e9f27223b",
          "timestamp": 1736963838012,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2533f727-cbc5-4884-9487-894e862b1803",
          "name": "Register Negative (password lowercase constraint fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "03637ae7-426e-430f-ab88-b6d7c72f9855",
          "length": 41,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8b7e5f4b-6bde-4ca3-8108-e33fbf5e1e11",
          "scriptId": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
          "execution": "d39652c3-251a-4206-89e0-7cf1c1e34914"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "3b5319b9-a458-4e77-8c34-22eba5a2f004",
          "timestamp": 1736963838089,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
          "name": "Register Negative (password number constraint fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "7e6852fe-6ae4-4d25-b608-358808703871",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "05aa948f-2186-4250-873e-a20327d7dfca",
          "length": 41,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e3f90151-a54e-4883-adf4-3a3743bf8d2d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "b6110cb46628a1e4a4b1e636e003ddc0",
          "id": "ba20ec29-4510-4e4a-a62b-03f0c394d72f",
          "timestamp": 1736963838106,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
          "name": "Register Negative (password number constraint fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "05aa948f-2186-4250-873e-a20327d7dfca",
          "length": 41,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e3f90151-a54e-4883-adf4-3a3743bf8d2d",
          "scriptId": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
          "execution": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid password",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "13b11479122d146e07e66b0fb12ef17b",
          "id": "ab72c2f2-7845-4a2c-8093-b11a7c857d19",
          "timestamp": 1736963838106,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
          "name": "Register Negative (password number constraint fail)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid password\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                  "});"
                ],
                "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "05aa948f-2186-4250-873e-a20327d7dfca",
          "length": 41,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e3f90151-a54e-4883-adf4-3a3743bf8d2d",
          "scriptId": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
          "execution": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "afa344c3-077b-4dd9-a1c9-6e5a69bcc16b",
          "timestamp": 1736963838180,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
          "name": "Register Negative (non unique username)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "3cd45b06-4f4b-42ae-b3de-0368b087dbde",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "7ac2704c-b2d9-4c22-b26f-3190a51639f8",
          "length": 41,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "af8ad51c-8bb3-4d00-b496-385c628b0c37"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "2c7ca04f294413a26b86c9a1c498057e",
          "id": "15aae0cf-965d-426a-8b83-5bdf98d5fa32",
          "timestamp": 1736963838197,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
          "name": "Register Negative (non unique username)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7ac2704c-b2d9-4c22-b26f-3190a51639f8",
          "length": 41,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "af8ad51c-8bb3-4d00-b496-385c628b0c37",
          "scriptId": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
          "execution": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid username",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "922bd3530cfb2dc8b046194afdcd8da3",
          "id": "a057ee35-8ff2-4574-846a-229f9c8ba509",
          "timestamp": 1736963838197,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
          "name": "Register Negative (non unique username)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7ac2704c-b2d9-4c22-b26f-3190a51639f8",
          "length": 41,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "af8ad51c-8bb3-4d00-b496-385c628b0c37",
          "scriptId": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
          "execution": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "293c6448-0fb9-459e-96e6-41dd2cd90976",
          "timestamp": 1736963838274,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
          "name": "Register Negative (Username too short)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8c950eef-46ae-4f23-a303-f2aad07a630c",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3d77a8df-bf01-47ef-89a1-e607aac59e2c",
          "length": 41,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "69e62842-12df-4a81-ab9e-8ff296b85fde"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "4b2b2ccaaab51919157b74ac8d0ca07f",
          "id": "7257d077-d88f-4ff7-8d34-82e04cb005f8",
          "timestamp": 1736963838291,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
          "name": "Register Negative (Username too short)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3d77a8df-bf01-47ef-89a1-e607aac59e2c",
          "length": 41,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "69e62842-12df-4a81-ab9e-8ff296b85fde",
          "scriptId": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
          "execution": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid username",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "437cf38964d2fe527e066de8d4ffd3b7",
          "id": "236927d7-76f7-4923-a260-89729f62a17c",
          "timestamp": 1736963838292,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
          "name": "Register Negative (Username too short)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3d77a8df-bf01-47ef-89a1-e607aac59e2c",
          "length": 41,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "69e62842-12df-4a81-ab9e-8ff296b85fde",
          "scriptId": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
          "execution": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "b9931959-8ba1-4dc9-b595-aeab49e74411",
          "timestamp": 1736963838367,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
          "name": "Register Negative (Username too long)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "7ac85144-3d16-44ea-b29c-65c35185ecaa",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "df56f717-1fd6-4a75-bde6-be1930191c46",
          "length": 41,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bd13aed1-8a2f-42c6-821c-cd5bfaffe4b8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "aa4618132b2890e4d2b24704c9d691a0",
          "id": "6dafde02-6136-49fa-a2a8-91c4b6b9b244",
          "timestamp": 1736963838385,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
          "name": "Register Negative (Username too long)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "df56f717-1fd6-4a75-bde6-be1930191c46",
          "length": 41,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bd13aed1-8a2f-42c6-821c-cd5bfaffe4b8",
          "scriptId": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
          "execution": "ea05a598-f94b-4436-9dc0-7420db3d4659"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid username",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "7724dba6731b35ec3afa6333f5a95499",
          "id": "9ce595cc-5e4f-4284-bbe3-0bd05cea075b",
          "timestamp": 1736963838386,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
          "name": "Register Negative (Username too long)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "df56f717-1fd6-4a75-bde6-be1930191c46",
          "length": 41,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bd13aed1-8a2f-42c6-821c-cd5bfaffe4b8",
          "scriptId": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
          "execution": "ea05a598-f94b-4436-9dc0-7420db3d4659"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "a2046d84-ae39-4508-84c9-b652225c2109",
          "timestamp": 1736963838461,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
          "name": "Register Negative (username doesn't start with letter)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "dd76321d-b466-4e84-a285-1e37ca8f5ecb",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "f8c97d2b-a5b5-41bc-82a0-9befb1406b4e",
          "length": 41,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c95c8af3-bd10-49a9-911a-588217a891b1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "6f9a35588255c4c9966af579ee049793",
          "id": "ccb1f3d5-b240-49c1-85c9-d30cd49fb95c",
          "timestamp": 1736963838463,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
          "name": "Register Negative (username doesn't start with letter)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f8c97d2b-a5b5-41bc-82a0-9befb1406b4e",
          "length": 41,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c95c8af3-bd10-49a9-911a-588217a891b1",
          "scriptId": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
          "execution": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid username",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "7e2b1e34be794abf7f3f8348e9b8117d",
          "id": "9ee9ff9d-afe9-47fb-a54f-821e01aea676",
          "timestamp": 1736963838463,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
          "name": "Register Negative (username doesn't start with letter)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f8c97d2b-a5b5-41bc-82a0-9befb1406b4e",
          "length": 41,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c95c8af3-bd10-49a9-911a-588217a891b1",
          "scriptId": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
          "execution": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}register",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}register",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}register\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "ee72704ddfbc340379f1732c1b58b642",
          "id": "b51c0936-b8af-4fe2-8b10-cc553da8ed14",
          "timestamp": 1736963838538,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
          "name": "Register Negative (Username has invalid characters)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "c669b1f7-9f4f-41d6-abb7-4671b332d3c4",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}register",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "4a68e855-058a-4da9-bb79-9d72ba4cfb52",
          "length": 41,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3929a18d-9122-428c-bbae-45d6f07d123d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "0abb7ede2e7fa38f4a6f35b739b3c525",
          "id": "6636db1d-055c-47ea-a239-5668170f626e",
          "timestamp": 1736963838542,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
          "name": "Register Negative (Username has invalid characters)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4a68e855-058a-4da9-bb79-9d72ba4cfb52",
          "length": 41,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3929a18d-9122-428c-bbae-45d6f07d123d",
          "scriptId": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
          "execution": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message should be Invalid username",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:18)",
          "checksum": "94453e6a8c6f1391d7c722eabf97ee08",
          "id": "195a550b-dc6d-4b51-8063-2f983fc9ee3a",
          "timestamp": 1736963838543,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
          "name": "Register Negative (Username has invalid characters)",
          "request": {
            "url": {
              "host": [
                "{{Base url}}register"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Message should be Invalid username\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                  "});"
                ],
                "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
              }
            }
          ]
        },
        "parent": {
          "id": "64ad7ae9-fee0-4601-8522-c1302ad8d461",
          "name": "Registration",
          "description": {
            "content": "Tests related to User Story 1\n\nAs a new user I want to open an account with the Planetarium so I can save my celestial findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d1874993-0084-4fa2-913c-2fa463b9963b",
              "name": "Register Positive",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"{{validNewUser}}\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5635a2b-66f3-41b9-bab0-a0b3af388284",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Message is User created successfully\", function () {\r",
                      "    pm.response.to.have.body(\"User created successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "06d87058-bfe4-46c1-8d0d-835c1f804d73"
                  }
                }
              ]
            },
            {
              "id": "b18e1773-1dc0-4449-942c-19f43016554b",
              "name": "Register Negative (password length long fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"AlfredIsTheBestButlerToExist111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b09baa-ef6b-42ad-81a8-991501fb5bfb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "347423fc-36cb-4609-8739-7c89083d024d"
                  }
                }
              ]
            },
            {
              "id": "730d12ea-32cf-4397-ba29-ac3e04671789",
              "name": "Register Negative (password length short fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"b0Ts\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23929dc5-8a67-410c-b5e0-a5beac501153",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c0d39a5-6dea-4a2a-9d1a-248380ccb929"
                  }
                }
              ]
            },
            {
              "id": "b99cfe55-28e2-4fab-90de-009f6e5c9f14",
              "name": "Register Negative (password start character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"3atman\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8745619d-3f2b-4ef6-a7eb-6a5dea54c6a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3c3c0f04-ae67-4b6c-bdce-d9764bad004f"
                  }
                }
              ]
            },
            {
              "id": "d2814e33-ae1e-489b-8e5b-295e138ffa03",
              "name": "Register Negative (password character fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"A1fredIsTheBestButlerToExist!!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4090ceef-6279-44c0-9adf-603331832231",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4e27c00-1694-44d4-8cf0-ec9232bef424"
                  }
                }
              ]
            },
            {
              "id": "958d7ace-2e00-43c6-911b-37d4ab739b02",
              "name": "Register Negative (password uppercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"batman1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d496ff-1eff-4d4e-92bc-e759e24f17f9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c371e2cb-d9cd-4e3c-a4b9-50123711521d"
                  }
                }
              ]
            },
            {
              "id": "2533f727-cbc5-4884-9487-894e862b1803",
              "name": "Register Negative (password lowercase constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"BATMAN1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d20ada5-cd7f-46bc-845e-7ffb391a5c77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d39652c3-251a-4206-89e0-7cf1c1e34914"
                  }
                }
              ]
            },
            {
              "id": "96ded2b4-7ad4-435b-8ba1-a588206b80c2",
              "name": "Register Negative (password number constraint fail)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Super_man-2001\",\r\n    \"password\":\"Robin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67d5b24a-d4d1-4c85-8680-b0e765e7eebd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid password\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid password\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dc1c77a7-a197-4e07-b72b-cebee0dd6a34"
                  }
                }
              ]
            },
            {
              "id": "dedb73e0-aad2-4847-baec-8ebc1e0c90da",
              "name": "Register Negative (non unique username)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Batman\",\r\n    \"password\":\"{{validLoginPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6acc9373-1d92-43c9-8c78-673a1ffdba8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51ecc7f8-f266-4477-8a3b-658e91c6a074"
                  }
                }
              ]
            },
            {
              "id": "64e6c6cb-1168-40f4-a826-07c56aa7ad66",
              "name": "Register Negative (Username too short)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"Bane\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e1fd56d-2a76-415c-a893-c2ddb0b0993b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2cd72ee-4e57-4cad-97a6-bc713bbc3901"
                  }
                }
              ]
            },
            {
              "id": "70bbba2f-e427-4144-9f14-5e548afe3f6b",
              "name": "Register Negative (Username too long)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"wonder_woman_for_the_DC_theming\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35e2c77f-a0d4-4bfc-96db-2379ce45c186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ea05a598-f94b-4436-9dc0-7420db3d4659"
                  }
                }
              ]
            },
            {
              "id": "ec20352e-d806-4e04-aa47-fe28e2d2461f",
              "name": "Register Negative (username doesn't start with letter)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"2face\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05f6c652-29a7-45b3-9846-0bdaaf428b34",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ec9715f6-26b9-4842-a9d0-4108112b34bb"
                  }
                }
              ]
            },
            {
              "id": "707a6187-844a-4ed8-9047-f1c0bc3fe9f0",
              "name": "Register Negative (Username has invalid characters)",
              "request": {
                "url": {
                  "host": [
                    "{{Base url}}register"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\":\"joker!!!!!!?)\",\r\n    \"password\":\"{{validNewPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Message should be Invalid username\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.value).to.eql(\"Invalid username\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4a68e855-058a-4da9-bb79-9d72ba4cfb52",
          "length": 41,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3929a18d-9122-428c-bbae-45d6f07d123d",
          "scriptId": "8099a4db-b755-4d6f-bac7-5a937cfe6197",
          "execution": "a38bca21-2acd-4e7d-a5eb-d3ee99741755"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "9fe796f9-f5e4-49d7-b515-10ecd3054a94",
          "timestamp": 1736963838615,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3fda9fb5-7c83-4882-887b-9cd483256a6b",
          "name": "Get Planets by Owner ID (ID = 1)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet",
                "owner",
                "1"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e3ac3b32-75a2-45fe-bf4e-02ddf80d39df",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80153c75-211f-4bb5-81d8-91898dc8ce6b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "    {\r",
                  "        \"planetId\": 1,\r",
                  "        \"planetName\": \"Earth\",\r",
                  "        \"ownerId\": 1,\r",
                  "        \"imageData\": \"{{EarthImage}}\"\r",
                  "    },\r",
                  "    {\r",
                  "        \"planetId\": 2,\r",
                  "        \"planetName\": \"Mars\",\r",
                  "        \"ownerId\": 1,\r",
                  "        \"imageData\": \"{{MarsImage}}\"\r",
                  "    }\r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "d3a098d9-e1fe-4b60-9643-4e75dbffb808",
          "length": 41,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ee81b431-de3f-40ab-b3c7-e3be7a8b0a28"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseBody' has already been declared",
          "checksum": "e4498a1e713b34c5058b087debe5bad4",
          "id": "c2c96116-c085-4957-94d4-e1dd227ce567",
          "timestamp": 1736963838632,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "3fda9fb5-7c83-4882-887b-9cd483256a6b",
          "name": "Get Planets by Owner ID (ID = 1)",
          "request": {
            "url": {
              "path": [
                "planet",
                "owner",
                "1"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80153c75-211f-4bb5-81d8-91898dc8ce6b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "    {\r",
                  "        \"planetId\": 1,\r",
                  "        \"planetName\": \"Earth\",\r",
                  "        \"ownerId\": 1,\r",
                  "        \"imageData\": \"{{EarthImage}}\"\r",
                  "    },\r",
                  "    {\r",
                  "        \"planetId\": 2,\r",
                  "        \"planetName\": \"Mars\",\r",
                  "        \"ownerId\": 1,\r",
                  "        \"imageData\": \"{{MarsImage}}\"\r",
                  "    }\r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ],
                "_lastExecutionId": "2ac7267f-95a5-4f8c-b22d-0760075b39bf"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "6e1e79ae-532d-4a08-bfa5-ae5278ac33e0",
          "name": "View",
          "description": {
            "content": "tests related to User Story 3\n\nAs a user I want to see my planets and moons added to the Planetarium so I can track my findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3fda9fb5-7c83-4882-887b-9cd483256a6b",
              "name": "Get Planets by Owner ID (ID = 1)",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "owner",
                    "1"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80153c75-211f-4bb5-81d8-91898dc8ce6b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    {\r",
                      "        \"planetId\": 1,\r",
                      "        \"planetName\": \"Earth\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{EarthImage}}\"\r",
                      "    },\r",
                      "    {\r",
                      "        \"planetId\": 2,\r",
                      "        \"planetName\": \"Mars\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{MarsImage}}\"\r",
                      "    }\r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ac7267f-95a5-4f8c-b22d-0760075b39bf"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "b05016b8-f67b-451b-853f-3dcc0eb256f6",
              "name": "Get Planets by Owner ID (ID = 10) Not in DB",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "owner",
                    "10"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74394cc7-adea-4aff-8c0f-6931a49c03a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "   \r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "fcc7fbdc-c928-4cc7-8244-3ff4413475be"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "2c07b571-c548-4fd7-be0a-815507dd8b5c",
              "name": "Get Moon by Planet ID (ID = 1)",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "owner",
                    "1"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d49cfad-93ff-44f3-8d91-b6cf53707308",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    {\r",
                      "        \"moonId\": 1,\r",
                      "        \"moonName\": \"Luna\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{LunaImage}}\"\r",
                      "    }\r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "4361d87f-2ed8-4b8a-9784-d0618c8f68e3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f73a99cf-0e65-459d-82a0-e4db0c3f457d",
              "name": "Get Moon by Planet ID (ID = 10) Not in DB",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "owner",
                    "10"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d85ac456-f366-4b07-a48a-8c048da6e20b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    \r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "f78853f2-8966-4cd2-9837-9e23732ccf26"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d3a098d9-e1fe-4b60-9643-4e75dbffb808",
          "length": 41,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ee81b431-de3f-40ab-b3c7-e3be7a8b0a28",
          "scriptId": "80153c75-211f-4bb5-81d8-91898dc8ce6b"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "4d71897f-ac8f-4ef5-8c16-257d467f769a",
          "timestamp": 1736963838709,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b05016b8-f67b-451b-853f-3dcc0eb256f6",
          "name": "Get Planets by Owner ID (ID = 10) Not in DB",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet",
                "owner",
                "10"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "7cbd99f1-16fd-4f2a-be8c-595e11b2d9cc",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74394cc7-adea-4aff-8c0f-6931a49c03a6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "   \r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "14577003-08b7-4755-b097-b2060114e190",
          "length": 41,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4507208e-0313-4e49-a278-4fe99c147a04"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseBody' has already been declared",
          "checksum": "e4498a1e713b34c5058b087debe5bad4",
          "id": "5d71d665-4f84-4f08-b2cb-d975621964a0",
          "timestamp": 1736963838727,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "b05016b8-f67b-451b-853f-3dcc0eb256f6",
          "name": "Get Planets by Owner ID (ID = 10) Not in DB",
          "request": {
            "url": {
              "path": [
                "planet",
                "owner",
                "10"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74394cc7-adea-4aff-8c0f-6931a49c03a6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "   \r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ],
                "_lastExecutionId": "fcc7fbdc-c928-4cc7-8244-3ff4413475be"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "6e1e79ae-532d-4a08-bfa5-ae5278ac33e0",
          "name": "View",
          "description": {
            "content": "tests related to User Story 3\n\nAs a user I want to see my planets and moons added to the Planetarium so I can track my findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3fda9fb5-7c83-4882-887b-9cd483256a6b",
              "name": "Get Planets by Owner ID (ID = 1)",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "owner",
                    "1"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80153c75-211f-4bb5-81d8-91898dc8ce6b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    {\r",
                      "        \"planetId\": 1,\r",
                      "        \"planetName\": \"Earth\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{EarthImage}}\"\r",
                      "    },\r",
                      "    {\r",
                      "        \"planetId\": 2,\r",
                      "        \"planetName\": \"Mars\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{MarsImage}}\"\r",
                      "    }\r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ac7267f-95a5-4f8c-b22d-0760075b39bf"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "b05016b8-f67b-451b-853f-3dcc0eb256f6",
              "name": "Get Planets by Owner ID (ID = 10) Not in DB",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "owner",
                    "10"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74394cc7-adea-4aff-8c0f-6931a49c03a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "   \r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "fcc7fbdc-c928-4cc7-8244-3ff4413475be"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "2c07b571-c548-4fd7-be0a-815507dd8b5c",
              "name": "Get Moon by Planet ID (ID = 1)",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "owner",
                    "1"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d49cfad-93ff-44f3-8d91-b6cf53707308",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    {\r",
                      "        \"moonId\": 1,\r",
                      "        \"moonName\": \"Luna\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{LunaImage}}\"\r",
                      "    }\r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "4361d87f-2ed8-4b8a-9784-d0618c8f68e3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f73a99cf-0e65-459d-82a0-e4db0c3f457d",
              "name": "Get Moon by Planet ID (ID = 10) Not in DB",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "owner",
                    "10"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d85ac456-f366-4b07-a48a-8c048da6e20b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    \r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "f78853f2-8966-4cd2-9837-9e23732ccf26"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "14577003-08b7-4755-b097-b2060114e190",
          "length": 41,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4507208e-0313-4e49-a278-4fe99c147a04",
          "scriptId": "74394cc7-adea-4aff-8c0f-6931a49c03a6"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "f5c80af0-a470-4ef8-9ac5-8112b5b9ff0b",
          "timestamp": 1736963838802,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2c07b571-c548-4fd7-be0a-815507dd8b5c",
          "name": "Get Moon by Planet ID (ID = 1)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon",
                "owner",
                "1"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "bc1b4084-148a-47b8-b334-319171f12404",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d49cfad-93ff-44f3-8d91-b6cf53707308",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "    {\r",
                  "        \"moonId\": 1,\r",
                  "        \"moonName\": \"Luna\",\r",
                  "        \"ownerId\": 1,\r",
                  "        \"imageData\": \"{{LunaImage}}\"\r",
                  "    }\r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "85187705-f27a-4c1b-a6de-0d55d51a74c8",
          "length": 41,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "34dd8494-754b-46bb-ac9a-9912273d5b5a"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseBody' has already been declared",
          "checksum": "e4498a1e713b34c5058b087debe5bad4",
          "id": "65ebfcb0-3947-4a42-b724-ea4cfe0fc76f",
          "timestamp": 1736963838821,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "2c07b571-c548-4fd7-be0a-815507dd8b5c",
          "name": "Get Moon by Planet ID (ID = 1)",
          "request": {
            "url": {
              "path": [
                "moon",
                "owner",
                "1"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d49cfad-93ff-44f3-8d91-b6cf53707308",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "    {\r",
                  "        \"moonId\": 1,\r",
                  "        \"moonName\": \"Luna\",\r",
                  "        \"ownerId\": 1,\r",
                  "        \"imageData\": \"{{LunaImage}}\"\r",
                  "    }\r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ],
                "_lastExecutionId": "4361d87f-2ed8-4b8a-9784-d0618c8f68e3"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "6e1e79ae-532d-4a08-bfa5-ae5278ac33e0",
          "name": "View",
          "description": {
            "content": "tests related to User Story 3\n\nAs a user I want to see my planets and moons added to the Planetarium so I can track my findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3fda9fb5-7c83-4882-887b-9cd483256a6b",
              "name": "Get Planets by Owner ID (ID = 1)",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "owner",
                    "1"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80153c75-211f-4bb5-81d8-91898dc8ce6b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    {\r",
                      "        \"planetId\": 1,\r",
                      "        \"planetName\": \"Earth\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{EarthImage}}\"\r",
                      "    },\r",
                      "    {\r",
                      "        \"planetId\": 2,\r",
                      "        \"planetName\": \"Mars\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{MarsImage}}\"\r",
                      "    }\r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ac7267f-95a5-4f8c-b22d-0760075b39bf"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "b05016b8-f67b-451b-853f-3dcc0eb256f6",
              "name": "Get Planets by Owner ID (ID = 10) Not in DB",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "owner",
                    "10"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74394cc7-adea-4aff-8c0f-6931a49c03a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "   \r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "fcc7fbdc-c928-4cc7-8244-3ff4413475be"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "2c07b571-c548-4fd7-be0a-815507dd8b5c",
              "name": "Get Moon by Planet ID (ID = 1)",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "owner",
                    "1"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d49cfad-93ff-44f3-8d91-b6cf53707308",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    {\r",
                      "        \"moonId\": 1,\r",
                      "        \"moonName\": \"Luna\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{LunaImage}}\"\r",
                      "    }\r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "4361d87f-2ed8-4b8a-9784-d0618c8f68e3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f73a99cf-0e65-459d-82a0-e4db0c3f457d",
              "name": "Get Moon by Planet ID (ID = 10) Not in DB",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "owner",
                    "10"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d85ac456-f366-4b07-a48a-8c048da6e20b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    \r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "f78853f2-8966-4cd2-9837-9e23732ccf26"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "85187705-f27a-4c1b-a6de-0d55d51a74c8",
          "length": 41,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "34dd8494-754b-46bb-ac9a-9912273d5b5a",
          "scriptId": "9d49cfad-93ff-44f3-8d91-b6cf53707308"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "39bcba88-74e6-4174-9098-bf97b5fe802a",
          "timestamp": 1736963838881,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f73a99cf-0e65-459d-82a0-e4db0c3f457d",
          "name": "Get Moon by Planet ID (ID = 10) Not in DB",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon",
                "owner",
                "10"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "74f875a3-1866-4999-8b0b-9e44a184dde2",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d85ac456-f366-4b07-a48a-8c048da6e20b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "    \r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "0a9ad05d-d0c2-4a32-8ab8-5453769ac4f5",
          "length": 41,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fcbc80ac-01b2-4e47-a6cf-b0ba27f91f96"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseBody' has already been declared",
          "checksum": "e4498a1e713b34c5058b087debe5bad4",
          "id": "17278136-1bff-4c50-bf77-264f7569c049",
          "timestamp": 1736963838931,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "f73a99cf-0e65-459d-82a0-e4db0c3f457d",
          "name": "Get Moon by Planet ID (ID = 10) Not in DB",
          "request": {
            "url": {
              "path": [
                "moon",
                "owner",
                "10"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "JSESSIONID",
                "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d85ac456-f366-4b07-a48a-8c048da6e20b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const expectedResponse = [\r",
                  "    \r",
                  "]\r",
                  "\r",
                  "const responseBody = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                  "});"
                ],
                "_lastExecutionId": "f78853f2-8966-4cd2-9837-9e23732ccf26"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "6e1e79ae-532d-4a08-bfa5-ae5278ac33e0",
          "name": "View",
          "description": {
            "content": "tests related to User Story 3\n\nAs a user I want to see my planets and moons added to the Planetarium so I can track my findings",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3fda9fb5-7c83-4882-887b-9cd483256a6b",
              "name": "Get Planets by Owner ID (ID = 1)",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "owner",
                    "1"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80153c75-211f-4bb5-81d8-91898dc8ce6b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    {\r",
                      "        \"planetId\": 1,\r",
                      "        \"planetName\": \"Earth\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{EarthImage}}\"\r",
                      "    },\r",
                      "    {\r",
                      "        \"planetId\": 2,\r",
                      "        \"planetName\": \"Mars\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{MarsImage}}\"\r",
                      "    }\r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ac7267f-95a5-4f8c-b22d-0760075b39bf"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "b05016b8-f67b-451b-853f-3dcc0eb256f6",
              "name": "Get Planets by Owner ID (ID = 10) Not in DB",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "owner",
                    "10"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74394cc7-adea-4aff-8c0f-6931a49c03a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "   \r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "fcc7fbdc-c928-4cc7-8244-3ff4413475be"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "2c07b571-c548-4fd7-be0a-815507dd8b5c",
              "name": "Get Moon by Planet ID (ID = 1)",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "owner",
                    "1"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d49cfad-93ff-44f3-8d91-b6cf53707308",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    {\r",
                      "        \"moonId\": 1,\r",
                      "        \"moonName\": \"Luna\",\r",
                      "        \"ownerId\": 1,\r",
                      "        \"imageData\": \"{{LunaImage}}\"\r",
                      "    }\r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "4361d87f-2ed8-4b8a-9784-d0618c8f68e3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f73a99cf-0e65-459d-82a0-e4db0c3f457d",
              "name": "Get Moon by Planet ID (ID = 10) Not in DB",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "owner",
                    "10"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "JSESSIONID",
                    "value": "node0g50dt9d2qlflssef6doeii3x1.node0"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d85ac456-f366-4b07-a48a-8c048da6e20b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const expectedResponse = [\r",
                      "    \r",
                      "]\r",
                      "\r",
                      "const responseBody = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Body is correct\", function () {\r",
                      "    pm.expect(responseBody).to.eql(expectedResponse);\r",
                      "});"
                    ],
                    "_lastExecutionId": "f78853f2-8966-4cd2-9837-9e23732ccf26"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a9ad05d-d0c2-4a32-8ab8-5453769ac4f5",
          "length": 41,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fcbc80ac-01b2-4e47-a6cf-b0ba27f91f96",
          "scriptId": "d85ac456-f366-4b07-a48a-8c048da6e20b"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "e334b11c-b6e8-40ff-980d-ad910640881f",
          "timestamp": 1736963838989,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
          "name": "Create Moon without image Positive",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "698f2561-a2f0-4a39-a813-dbf6b96e957c",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "96734aa8-4d77-48b6-abe8-6c0e4485b797",
          "length": 41,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "997f06be-c691-4059-8589-6fdc49e07597"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "41f93da52412c49123684f182ac42886",
          "id": "890c0697-0b64-4358-8206-7f35bc997d42",
          "timestamp": 1736963839007,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
          "name": "Create Moon without image Positive",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});"
                ],
                "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "96734aa8-4d77-48b6-abe8-6c0e4485b797",
          "length": 41,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "997f06be-c691-4059-8589-6fdc49e07597",
          "scriptId": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
          "execution": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "868d0529-a22f-40c9-a0ae-c2db9c71c952",
          "timestamp": 1736963839080,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
          "name": "Create Moon with image Positive",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "3880bd72-9ba0-47b1-a7be-dc69f22bd421",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "61a1242e-bb15-4f71-9d6b-114d7df0d0e1",
          "length": 41,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "60ce7387-ef7e-4084-a4b1-e244b193874d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "705212bb62e9d7086d3a9b253b53b60d",
          "id": "a358ca1a-66fe-4b52-9144-4c3beae2e63f",
          "timestamp": 1736963839096,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
          "name": "Create Moon with image Positive",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "61a1242e-bb15-4f71-9d6b-114d7df0d0e1",
          "length": 41,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "60ce7387-ef7e-4084-a4b1-e244b193874d",
          "scriptId": "723303f9-4a99-423a-b9c9-5f3828f95c44",
          "execution": "07feef2f-bfff-4489-9540-733dba13e60f"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "36ff8c40-8f4a-4dd0-80b3-fe90d5a7175a",
          "timestamp": 1736963839172,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
          "name": "Create Moon without image Negative (moon name invalid characters fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "518d4cf7-7105-4cb0-b7b1-1c740bab7724",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ef600aed-2fae-4705-9ec8-e9dbe3148aa0",
          "length": 41,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "71eb5be4-b566-4ab5-a03e-c6b9bd4d88cb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "f5304b7d32693cffcd876b666998ff79",
          "id": "9972c351-40be-4b3d-8174-92287ed3df1c",
          "timestamp": 1736963839193,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
          "name": "Create Moon without image Negative (moon name invalid characters fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ef600aed-2fae-4705-9ec8-e9dbe3148aa0",
          "length": 41,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "71eb5be4-b566-4ab5-a03e-c6b9bd4d88cb",
          "scriptId": "c3ec364b-de70-49df-9ee7-37876db909fb",
          "execution": "103f80b9-8164-45f8-bb52-84dce66adf4d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "85a93ee70bd9717cf6813220a6d958cb",
          "id": "1e5fd7f5-85bc-499f-b0fc-2591ad726ed7",
          "timestamp": 1736963839194,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
          "name": "Create Moon without image Negative (moon name invalid characters fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ef600aed-2fae-4705-9ec8-e9dbe3148aa0",
          "length": 41,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "71eb5be4-b566-4ab5-a03e-c6b9bd4d88cb",
          "scriptId": "c3ec364b-de70-49df-9ee7-37876db909fb",
          "execution": "103f80b9-8164-45f8-bb52-84dce66adf4d"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "2acacae9-7993-43e1-9987-0d5f4684e4cf",
          "timestamp": 1736963839267,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
          "name": "Create Moon without image Negative (moon name unique fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "32c5ae8c-58fc-47da-9440-14bc3fde20f9",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c261adac-d80b-4ba8-9112-39f3a6926990",
          "length": 41,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5acfb4db-30b8-4f23-8c07-68eefbfcb1f0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "495f31dd729615019b54d74c4f432db4",
          "id": "fc8f5e28-b609-43ab-97e2-e745c9b27d32",
          "timestamp": 1736963839292,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
          "name": "Create Moon without image Negative (moon name unique fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c261adac-d80b-4ba8-9112-39f3a6926990",
          "length": 41,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5acfb4db-30b8-4f23-8c07-68eefbfcb1f0",
          "scriptId": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
          "execution": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:26)",
          "checksum": "5a33a3e7cc3e8804b9136b18e6538f74",
          "id": "15a0ad9d-ea49-49c8-bcce-2edbca6a8b88",
          "timestamp": 1736963839294,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
          "name": "Create Moon without image Negative (moon name unique fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c261adac-d80b-4ba8-9112-39f3a6926990",
          "length": 41,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5acfb4db-30b8-4f23-8c07-68eefbfcb1f0",
          "scriptId": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
          "execution": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "25e3143c-ea83-4bb0-ab1d-142d53a9765f",
          "timestamp": 1736963839392,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
          "name": "Create Moon without image Negative (moon name length short fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2c27b5ee-f66c-470e-89fd-3f6e4e9a7ab0",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "09dd7637-31a6-4179-9929-1528a6761c51",
          "length": 41,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ca295754-f5fc-438e-8bd8-422a064e0af5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "aa25f13fcaf5cf7831bc15f8a38efe12",
          "id": "bb05079a-02ed-44f4-9946-3ef574a60cac",
          "timestamp": 1736963839399,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
          "name": "Create Moon without image Negative (moon name length short fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "09dd7637-31a6-4179-9929-1528a6761c51",
          "length": 41,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ca295754-f5fc-438e-8bd8-422a064e0af5",
          "scriptId": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
          "execution": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:27)",
          "checksum": "374fdf7c4fb6647ccfe2bb8902ee050b",
          "id": "303c9696-7440-4273-986f-914bdb932fa5",
          "timestamp": 1736963839400,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
          "name": "Create Moon without image Negative (moon name length short fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "09dd7637-31a6-4179-9929-1528a6761c51",
          "length": 41,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ca295754-f5fc-438e-8bd8-422a064e0af5",
          "scriptId": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
          "execution": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "7099c1ba-92c7-4b85-a4c0-bc225cc34843",
          "timestamp": 1736963839466,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
          "name": "Create Moon without image Negative (moon name length long fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d2326c1e-54b9-4be9-aefa-b71d841a7d16",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ffd076e9-e48b-4c4d-b83a-17ddc471cdba",
          "length": 41,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f8c9ede4-d784-4a13-aed8-7ceff9246fd4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)",
          "checksum": "ccf18e06235e1062210ae850f555e921",
          "id": "46f8685f-b2e1-43c2-968a-64d57c4dc5a3",
          "timestamp": 1736963839484,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
          "name": "Create Moon without image Negative (moon name length long fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ffd076e9-e48b-4c4d-b83a-17ddc471cdba",
          "length": 41,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f8c9ede4-d784-4a13-aed8-7ceff9246fd4",
          "scriptId": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
          "execution": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:28)",
          "checksum": "93bf6782f47ada4313ceaae9a2d559d3",
          "id": "911ace37-c337-4cc0-be96-d68b1963fed0",
          "timestamp": 1736963839484,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
          "name": "Create Moon without image Negative (moon name length long fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ffd076e9-e48b-4c4d-b83a-17ddc471cdba",
          "length": 41,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f8c9ede4-d784-4a13-aed8-7ceff9246fd4",
          "scriptId": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
          "execution": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "f9fe96f1-0696-4e75-ad79-8e252a6f5653",
          "timestamp": 1736963839557,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
          "name": "Create Moon without image Negative  (planet id fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "0900331c-c034-411f-a012-ead466841855",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "7962d0f0-c058-48d9-b9e6-bc775ec2b86f",
          "length": 41,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4e06f4c2-60f2-4430-bafb-100741a8eb75"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)",
          "checksum": "9b3508264e88ca7344ff63af732069f8",
          "id": "973c20c3-8c54-47a3-ba5b-1d2f513ccead",
          "timestamp": 1736963839565,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
          "name": "Create Moon without image Negative  (planet id fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                  "});"
                ],
                "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7962d0f0-c058-48d9-b9e6-bc775ec2b86f",
          "length": 41,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4e06f4c2-60f2-4430-bafb-100741a8eb75",
          "scriptId": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
          "execution": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:29)",
          "checksum": "c194b95a86f21f5bb1a166e780c0e632",
          "id": "a41f3042-2e28-463a-b571-a3d990d3e2c5",
          "timestamp": 1736963839565,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
          "name": "Create Moon without image Negative  (planet id fail)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                  "});"
                ],
                "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7962d0f0-c058-48d9-b9e6-bc775ec2b86f",
          "length": 41,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4e06f4c2-60f2-4430-bafb-100741a8eb75",
          "scriptId": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
          "execution": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "3aca2cb9-76c0-4eaa-8757-e58af0aa34a3",
          "timestamp": 1736963839649,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
          "name": "Create Moon with image Negative (invalid file format)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "b8ec8e4a-0ed1-468f-999e-12820a727aac",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "b888f68a-5186-4532-93b9-b7f9c854affb",
          "length": 41,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "809660cf-2851-4246-b969-81249d9bace5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "3bc3cf7f8f520eed6b91bea214c7f765",
          "id": "6d97f722-1282-49bf-b5f3-24d3fe55d613",
          "timestamp": 1736963839665,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
          "name": "Create Moon with image Negative (invalid file format)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                  "});"
                ],
                "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b888f68a-5186-4532-93b9-b7f9c854affb",
          "length": 41,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "809660cf-2851-4246-b969-81249d9bace5",
          "scriptId": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
          "execution": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:30)",
          "checksum": "9b99f73733217d3f1bc15613c0f74387",
          "id": "25bd778e-cf0c-4479-8497-c2ef191652fa",
          "timestamp": 1736963839666,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
          "name": "Create Moon with image Negative (invalid file format)",
          "request": {
            "url": {
              "path": [
                "moon"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                  "});"
                ],
                "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
              }
            }
          ]
        },
        "parent": {
          "id": "f9f0a9e4-7162-4f32-8491-d9acf61b3833",
          "name": "Moon",
          "description": {
            "content": "tests related to moon creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "da7c261c-7909-4dd9-9ac3-96419fa365aa",
              "name": "Create Moon without image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedes\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa53adc2-5a1c-4e20-9274-08f4683831dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "667ab9f7-1411-4bf3-b7b8-24067e37d643"
                  }
                }
              ]
            },
            {
              "id": "2aca3d12-315a-4dde-9dfd-61cfcba2eb4b",
              "name": "Create Moon with image Positive",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"lalalallalala1\",\r\n    \"ownerId\": 1,\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "723303f9-4a99-423a-b9c9-5f3828f95c44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "07feef2f-bfff-4489-9540-733dba13e60f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2a51fe97-30ce-4782-acf7-ad08c664fc0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "76c30016-2fd0-46a5-b340-f0b6760e6e90"
                  }
                }
              ]
            },
            {
              "id": "741e783b-4f98-484a-9682-c2c162ed3c66",
              "name": "Create Moon without image Negative (moon name invalid characters fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna!\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3ec364b-de70-49df-9ee7-37876db909fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "103f80b9-8164-45f8-bb52-84dce66adf4d"
                  }
                }
              ]
            },
            {
              "id": "a7b0de1c-215d-4752-a803-c4f6e0618179",
              "name": "Create Moon without image Negative (moon name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Luna\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56c228c2-984f-4641-bfdf-57eb44f11e5c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a53b7bd2-5d59-400f-930a-2b7b0a2373bc"
                  }
                }
              ]
            },
            {
              "id": "6d604db4-7153-45b3-bb37-8ec50e4666c7",
              "name": "Create Moon without image Negative (moon name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54b01c04-76b2-46e1-bd4a-7593a52552d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c4f889ac-2ed0-443f-b75e-ff287a97ae58"
                  }
                }
              ]
            },
            {
              "id": "39589cb1-c245-4df5-8c18-75748d147f9f",
              "name": "Create Moon without image Negative (moon name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd112f7f-86b3-4496-8bd3-46fb0d004212",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "eaaf65c1-b67c-4cf0-b71e-f62df24d38b3"
                  }
                }
              ]
            },
            {
              "id": "df668008-7d72-400a-8bc3-b4524feaacb2",
              "name": "Create Moon without image Negative  (planet id fail)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"Ganymedesa\",\r\n    \"ownerId\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "094b0949-54ca-4927-b13c-0fa9e3dd3155",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet ID\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c009118e-e7a8-46b0-ad3b-2f601b316d27"
                  }
                }
              ]
            },
            {
              "id": "e1307c5e-a9ab-48a0-803d-05d360c4a7d9",
              "name": "Create Moon with image Negative (invalid file format)",
              "request": {
                "url": {
                  "path": [
                    "moon"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"moonName\": \"MoonV2\",\r\n    \"ownerId\": 0,\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b888f68a-5186-4532-93b9-b7f9c854affb",
          "length": 41,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "809660cf-2851-4246-b969-81249d9bace5",
          "scriptId": "e3ce42c7-3ae0-4423-9a0a-cabbf276753f",
          "execution": "7b5177f0-ce33-43e9-b3ab-dc3fac532a2d"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "6f67af5e-50ae-4583-80c6-062712934684",
          "timestamp": 1736963839740,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
          "name": "Create Planet without image data Positive",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "9992e322-c034-4178-894a-dcb07eb00682",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "cab4ccf6-440d-4610-9f56-d6fc2ddae0ad",
          "length": 41,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "70e2c976-341e-4298-845d-7708736b8e0c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)",
          "checksum": "4cb99a6cd6cf15c156897b17ef1a8fae",
          "id": "9eb03098-da71-4668-85e8-f6cf29e2238e",
          "timestamp": 1736963839757,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 31,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
          "name": "Create Planet without image data Positive",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});"
                ],
                "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cab4ccf6-440d-4610-9f56-d6fc2ddae0ad",
          "length": 41,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "70e2c976-341e-4298-845d-7708736b8e0c",
          "scriptId": "9fb2256b-12f4-4aba-bda0-dddd43124745",
          "execution": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "b9c9642f-976f-49ad-9536-eb53612110f2",
          "timestamp": 1736963839827,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
          "name": "Create Planet with image data Positive",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "1cd493cb-c079-44af-8e4b-fa3d7b7972dc",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "afaaf4be-256b-435e-8bba-8da2ef866a18",
          "length": 41,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1b8ce1c7-34e4-4608-bc0f-a890b32c1063"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)",
          "checksum": "9b583d9c3bdedf98993eae16d3a23b30",
          "id": "f6069131-881d-414d-bca2-553258b1637c",
          "timestamp": 1736963839836,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
          "name": "Create Planet with image data Positive",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});"
                ],
                "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "afaaf4be-256b-435e-8bba-8da2ef866a18",
          "length": 41,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1b8ce1c7-34e4-4608-bc0f-a890b32c1063",
          "scriptId": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
          "execution": "c379c14f-8700-4ef4-b5fc-aab240868863"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "db64723a-8856-4db0-a2ea-b98cd9e64a1c",
          "timestamp": 1736963839893,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
          "name": "Create Planet with Invalid name (planet name length long fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "5f605a3b-c1b1-4241-984d-9c883947114c",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c1615dd2-455e-47a7-87e2-110ce517cd66",
          "length": 41,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d46549d5-3088-43ff-9624-7af292d8ef20"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)",
          "checksum": "3413a5c47d40a18717345b9be77b8637",
          "id": "0a7fe7eb-f7d9-4c58-98b4-d04723abbe21",
          "timestamp": 1736963839911,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 33,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
          "name": "Create Planet with Invalid name (planet name length long fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c1615dd2-455e-47a7-87e2-110ce517cd66",
          "length": 41,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d46549d5-3088-43ff-9624-7af292d8ef20",
          "scriptId": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
          "execution": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:33)",
          "checksum": "11245c3471a82cc91ec8fd0063832ebd",
          "id": "d695ee11-bf94-48e9-b7ce-c7434ea342cc",
          "timestamp": 1736963839912,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 33,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
          "name": "Create Planet with Invalid name (planet name length long fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c1615dd2-455e-47a7-87e2-110ce517cd66",
          "length": 41,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d46549d5-3088-43ff-9624-7af292d8ef20",
          "scriptId": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
          "execution": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "a7375e80-ee40-43ae-8f0d-b2809ce9107e",
          "timestamp": 1736963839985,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "de653775-47c7-4e11-b084-05d61933ff72",
          "name": "Create Planet with Invalid name (planet name length short fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "209e9993-a4c0-41ec-a384-1cfad0318d02",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "7a046aea-8420-4f5e-978b-457956923cde",
          "length": 41,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b5111cd2-3c60-4a49-93e5-9eb570f15b66"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)",
          "checksum": "699067050d857d0063998003ebe0c34c",
          "id": "eb7731fb-dd5d-49ce-9550-06aaa7e9825f",
          "timestamp": 1736963840005,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 34,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "de653775-47c7-4e11-b084-05d61933ff72",
          "name": "Create Planet with Invalid name (planet name length short fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7a046aea-8420-4f5e-978b-457956923cde",
          "length": 41,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b5111cd2-3c60-4a49-93e5-9eb570f15b66",
          "scriptId": "108914c5-a87d-41dc-b795-649896c1dd8e",
          "execution": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:34)",
          "checksum": "dae0b499dc23a2d90319415b898b529b",
          "id": "eb7011e6-4861-4e6c-8a3d-8f7560d1b012",
          "timestamp": 1736963840005,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 34,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "de653775-47c7-4e11-b084-05d61933ff72",
          "name": "Create Planet with Invalid name (planet name length short fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7a046aea-8420-4f5e-978b-457956923cde",
          "length": 41,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b5111cd2-3c60-4a49-93e5-9eb570f15b66",
          "scriptId": "108914c5-a87d-41dc-b795-649896c1dd8e",
          "execution": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "1a7bbfd3-d617-49b2-bbd0-a0181f28feec",
          "timestamp": 1736963840026,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
          "name": "Create Planet with Invalid name (planet name unique fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "b02684ad-bbc4-47af-aeec-90f9bda4e4c4",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "6b8935dc-d976-44a9-9007-6acaf0ce2a92",
          "length": 41,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "16fd383a-5ffc-410e-815d-5dd08af43940"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)",
          "checksum": "3902fd6b4766c9214aedc1e1477d6044",
          "id": "43ae763e-867d-491b-be04-946ff4c2d035",
          "timestamp": 1736963840032,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
          "name": "Create Planet with Invalid name (planet name unique fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6b8935dc-d976-44a9-9007-6acaf0ce2a92",
          "length": 41,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "16fd383a-5ffc-410e-815d-5dd08af43940",
          "scriptId": "62690055-2ff4-4965-8515-24c49a7a02ea",
          "execution": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:35)",
          "checksum": "12a5a06ce7eca14c62a6d10d3481b607",
          "id": "aa21ae28-3e31-4927-93c6-2c87170fa7f7",
          "timestamp": 1736963840032,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
          "name": "Create Planet with Invalid name (planet name unique fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6b8935dc-d976-44a9-9007-6acaf0ce2a92",
          "length": 41,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "16fd383a-5ffc-410e-815d-5dd08af43940",
          "scriptId": "62690055-2ff4-4965-8515-24c49a7a02ea",
          "execution": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "d59bf717-c102-4aaa-8f91-c47d621a16f4",
          "timestamp": 1736963840109,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
          "name": "Create Planet with Invalid name (planet name  character fail)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "abb034a6-1078-4ef4-8d3f-9cefd8413841",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "2d10443e-42d6-49a8-85db-bf302d4504eb",
          "length": 41,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9fe7df4c-0eea-407b-afd4-680ca38a72af"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)",
          "checksum": "3e94d9b7633eb05718e5023d26642aa2",
          "id": "a56e44b1-0d81-4b7e-9737-43c33df02c6e",
          "timestamp": 1736963840125,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 36,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
          "name": "Create Planet with Invalid name (planet name  character fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d10443e-42d6-49a8-85db-bf302d4504eb",
          "length": 41,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9fe7df4c-0eea-407b-afd4-680ca38a72af",
          "scriptId": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
          "execution": "74fa921a-3709-4607-a5e3-46a95996178f"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:36)",
          "checksum": "662209933c2adf9736f3bc3f6f4cd434",
          "id": "0a13eee7-01aa-4a95-9603-40917b955cfb",
          "timestamp": 1736963840126,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 36,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
          "name": "Create Planet with Invalid name (planet name  character fail)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d10443e-42d6-49a8-85db-bf302d4504eb",
          "length": 41,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9fe7df4c-0eea-407b-afd4-680ca38a72af",
          "scriptId": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
          "execution": "74fa921a-3709-4607-a5e3-46a95996178f"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "bcaad2d3-01a5-4a9a-b286-6495972519e4",
          "timestamp": 1736963840204,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
          "name": "Create Planet Negative (Invalid file type)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "ca4ae582-8208-4df3-81e0-875c13297e05",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3d793469-5d47-465b-a7d7-6ad53ceae7b4",
          "length": 41,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8df802f5-9dd5-4850-ae57-1aa2c8b2582c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)",
          "checksum": "50cdc62666daf00fe8b53b67f55fe9c3",
          "id": "55892c0c-e1bb-442b-b16d-fb903c444e39",
          "timestamp": 1736963840222,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 37,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
          "name": "Create Planet Negative (Invalid file type)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                  "});"
                ],
                "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3d793469-5d47-465b-a7d7-6ad53ceae7b4",
          "length": 41,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8df802f5-9dd5-4850-ae57-1aa2c8b2582c",
          "scriptId": "214893a1-2360-44aa-89b9-56bb82702e1d",
          "execution": "6d536ae6-3200-439f-9af0-3526cc7aef86"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Return message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:37)",
          "checksum": "508491f286490f8d7df0e18b3f8acd0f",
          "id": "2e861dfe-7cde-4293-85ce-e07730c2a767",
          "timestamp": 1736963840222,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 37,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
          "name": "Create Planet Negative (Invalid file type)",
          "request": {
            "url": {
              "path": [
                "planet"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Return message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                  "});"
                ],
                "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
              }
            }
          ]
        },
        "parent": {
          "id": "831af1d4-f7e8-4643-82e6-8e84a76089f3",
          "name": "Planet",
          "description": {
            "content": "tests related to planet creation",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "19bbcbbd-3183-4145-b08b-08ff9b6e7133",
              "name": "Create Planet without image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Venus -55_\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb2256b-12f4-4aba-bda0-dddd43124745",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "56ec934a-1a21-4be1-9a61-269c27eec4b8"
                  }
                }
              ]
            },
            {
              "id": "8169805b-088f-4498-aaf9-8e7abef844c2",
              "name": "Create Planet with image data Positive",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 30\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{EarthImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a51d459-3aa9-41e9-8e97-5662be0345b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c379c14f-8700-4ef4-b5fc-aab240868863"
                  }
                }
              ]
            },
            {
              "id": "639be85c-e6b0-4c75-8175-e84d09435d95",
              "name": "Create Planet with Invalid name (planet name length long fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Planet Name That-is 1  long_name \",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b4dad46-4757-4865-ac31-f2d7651a2a73",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "197fc005-d85d-453d-9c5d-e75bb808f5c5"
                  }
                }
              ]
            },
            {
              "id": "de653775-47c7-4e11-b084-05d61933ff72",
              "name": "Create Planet with Invalid name (planet name length short fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "108914c5-a87d-41dc-b795-649896c1dd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1fec57c-3f7d-4cea-a1f2-f908cfbbbf5c"
                  }
                }
              ]
            },
            {
              "id": "d4eba8cd-4067-4662-9ed3-4742d161c92c",
              "name": "Create Planet with Invalid name (planet name unique fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62690055-2ff4-4965-8515-24c49a7a02ea",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dced22a4-f07b-48e3-ba4e-cb45612cb21e"
                  }
                }
              ]
            },
            {
              "id": "cb1ca651-a274-4aba-9cd5-b86bdddcf9f9",
              "name": "Create Planet with Invalid name (planet name  character fail)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Exciting!! planet\",\r\n    \"ownerId\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f54423b4-9d1d-4029-95a1-8ad4cff85140",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74fa921a-3709-4607-a5e3-46a95996178f"
                  }
                }
              ]
            },
            {
              "id": "115cc0e3-87d1-4e1e-a63b-1119146b66ba",
              "name": "Create Planet Negative (Invalid file type)",
              "request": {
                "url": {
                  "path": [
                    "planet"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"planetName\": \"Earth 39\",\r\n    \"ownerId\": \"1\",\r\n    \"imageData\": \"{{GIFImage}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214893a1-2360-44aa-89b9-56bb82702e1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Return message\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid file type\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d536ae6-3200-439f-9af0-3526cc7aef86"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3d793469-5d47-465b-a7d7-6ad53ceae7b4",
          "length": 41,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8df802f5-9dd5-4850-ae57-1aa2c8b2582c",
          "scriptId": "214893a1-2360-44aa-89b9-56bb82702e1d",
          "execution": "6d536ae6-3200-439f-9af0-3526cc7aef86"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "e3b682d6-3af8-4900-b523-1217a62cb722",
          "timestamp": 1736963840297,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "84693622-44ae-45fb-8c5e-8919451887da",
          "name": "Delete Planet Positive",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet",
                "Earth"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "aa9ab9e7-4835-4468-b957-0e09c2f77aa6",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3cbadde-f556-46b8-a2fc-415e177239ba",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ab737ed5-7886-4aad-927d-1bc5bdfdf3e5",
          "length": 41,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5a1b624f-204a-47f5-bbb8-0dbfe8883fe5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 204",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)",
          "checksum": "ad6217e1d9bb35d5fbdb80a73968a91f",
          "id": "acbc226f-6061-4aa2-92ba-dbe0dbc07ee1",
          "timestamp": 1736963840313,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 38,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "84693622-44ae-45fb-8c5e-8919451887da",
          "name": "Delete Planet Positive",
          "request": {
            "url": {
              "path": [
                "planet",
                "Earth"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3cbadde-f556-46b8-a2fc-415e177239ba",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "_lastExecutionId": "bc2b7bc5-1c0d-4ecc-9031-0ea509284157"
              }
            }
          ]
        },
        "parent": {
          "id": "da811c19-7740-4e14-a2c1-fec8ff326dc9",
          "name": "Planet",
          "description": {
            "content": "tests related to planet deletion",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "84693622-44ae-45fb-8c5e-8919451887da",
              "name": "Delete Planet Positive",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "Earth"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3cbadde-f556-46b8-a2fc-415e177239ba",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc2b7bc5-1c0d-4ecc-9031-0ea509284157"
                  }
                }
              ]
            },
            {
              "id": "9c9be228-0a1f-4fc1-85b1-2ebd3f54ccf7",
              "name": "Delete Planet Negative",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "Planet Name That-is 1  long_name"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2765d74a-e334-463e-b65b-e1401bb52cf9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      "pm.test(\"Your test name\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a969f615-5937-4541-9218-cb50a15f2af5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ab737ed5-7886-4aad-927d-1bc5bdfdf3e5",
          "length": 41,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5a1b624f-204a-47f5-bbb8-0dbfe8883fe5",
          "scriptId": "a3cbadde-f556-46b8-a2fc-415e177239ba",
          "execution": "bc2b7bc5-1c0d-4ecc-9031-0ea509284157"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "f5ab65e0-1e72-4d25-8408-b483e99b76e5",
          "timestamp": 1736963840388,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "9c9be228-0a1f-4fc1-85b1-2ebd3f54ccf7",
          "name": "Delete Planet Negative",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "planet",
                "Planet%20Name%20That-is%201%20%20long_name"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d3085a22-f707-4404-9b30-256c81153526",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2765d74a-e334-463e-b65b-e1401bb52cf9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ebb8f719-71eb-431f-bc61-15a55b5c3a08",
          "length": 41,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5a019a65-6699-4a0a-9df8-f74da7167a22"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)",
          "checksum": "04e4bc4004d696ff5bef863a4e2612ad",
          "id": "880b50e2-dca9-448a-bcca-a6ad65937faf",
          "timestamp": 1736963840405,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 39,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9c9be228-0a1f-4fc1-85b1-2ebd3f54ccf7",
          "name": "Delete Planet Negative",
          "request": {
            "url": {
              "path": [
                "planet",
                "Planet Name That-is 1  long_name"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2765d74a-e334-463e-b65b-e1401bb52cf9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "a969f615-5937-4541-9218-cb50a15f2af5"
              }
            }
          ]
        },
        "parent": {
          "id": "da811c19-7740-4e14-a2c1-fec8ff326dc9",
          "name": "Planet",
          "description": {
            "content": "tests related to planet deletion",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "84693622-44ae-45fb-8c5e-8919451887da",
              "name": "Delete Planet Positive",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "Earth"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3cbadde-f556-46b8-a2fc-415e177239ba",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc2b7bc5-1c0d-4ecc-9031-0ea509284157"
                  }
                }
              ]
            },
            {
              "id": "9c9be228-0a1f-4fc1-85b1-2ebd3f54ccf7",
              "name": "Delete Planet Negative",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "Planet Name That-is 1  long_name"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2765d74a-e334-463e-b65b-e1401bb52cf9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      "pm.test(\"Your test name\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a969f615-5937-4541-9218-cb50a15f2af5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ebb8f719-71eb-431f-bc61-15a55b5c3a08",
          "length": 41,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5a019a65-6699-4a0a-9df8-f74da7167a22",
          "scriptId": "2765d74a-e334-463e-b65b-e1401bb52cf9",
          "execution": "a969f615-5937-4541-9218-cb50a15f2af5"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Your test name",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:39)",
          "checksum": "1ae0fc4b0add990e1d6710d63f330fd1",
          "id": "85341601-d92c-447c-aa9e-a3ca9c33f842",
          "timestamp": 1736963840405,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 39,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9c9be228-0a1f-4fc1-85b1-2ebd3f54ccf7",
          "name": "Delete Planet Negative",
          "request": {
            "url": {
              "path": [
                "planet",
                "Planet Name That-is 1  long_name"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2765d74a-e334-463e-b65b-e1401bb52cf9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                  "});"
                ],
                "_lastExecutionId": "a969f615-5937-4541-9218-cb50a15f2af5"
              }
            }
          ]
        },
        "parent": {
          "id": "da811c19-7740-4e14-a2c1-fec8ff326dc9",
          "name": "Planet",
          "description": {
            "content": "tests related to planet deletion",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "84693622-44ae-45fb-8c5e-8919451887da",
              "name": "Delete Planet Positive",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "Earth"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3cbadde-f556-46b8-a2fc-415e177239ba",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc2b7bc5-1c0d-4ecc-9031-0ea509284157"
                  }
                }
              ]
            },
            {
              "id": "9c9be228-0a1f-4fc1-85b1-2ebd3f54ccf7",
              "name": "Delete Planet Negative",
              "request": {
                "url": {
                  "path": [
                    "planet",
                    "Planet Name That-is 1  long_name"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2765d74a-e334-463e-b65b-e1401bb52cf9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      "pm.test(\"Your test name\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid planet name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a969f615-5937-4541-9218-cb50a15f2af5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ebb8f719-71eb-431f-bc61-15a55b5c3a08",
          "length": 41,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5a019a65-6699-4a0a-9df8-f74da7167a22",
          "scriptId": "2765d74a-e334-463e-b65b-e1401bb52cf9",
          "execution": "a969f615-5937-4541-9218-cb50a15f2af5"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "e0146971-46ba-4058-8520-128a2cecf286",
          "timestamp": 1736963840481,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "23dddb58-5686-4bf9-9362-4aa6166ef521",
          "name": "Delete Moon Negative",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon",
                "xyz"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "40d894a2-898d-4938-9b08-94c29618c9f7",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c73a85a1-5cbe-4fb3-8dd1-4cb9dbcca7b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ee9cb349-83f0-41d2-a8d6-0b8a3f96ff8e",
          "length": 41,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "47ab415e-90ac-4952-a43e-3bbd37e771fb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)",
          "checksum": "2e980b10f3ddfeae1df52ed8f32c5a6a",
          "id": "26c12d8a-d952-45f6-81d0-e2730c05352d",
          "timestamp": 1736963840497,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "23dddb58-5686-4bf9-9362-4aa6166ef521",
          "name": "Delete Moon Negative",
          "request": {
            "url": {
              "path": [
                "moon",
                "xyz"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c73a85a1-5cbe-4fb3-8dd1-4cb9dbcca7b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "70e99897-37d6-4e82-bdcc-d9141c0bdce5"
              }
            }
          ]
        },
        "parent": {
          "id": "f914076a-280b-4e54-b89d-05df0bc0a153",
          "name": "Moon",
          "description": {
            "content": "tests related to moon deletion",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "23dddb58-5686-4bf9-9362-4aa6166ef521",
              "name": "Delete Moon Negative",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "xyz"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c73a85a1-5cbe-4fb3-8dd1-4cb9dbcca7b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      "pm.test(\"Your test name\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70e99897-37d6-4e82-bdcc-d9141c0bdce5"
                  }
                }
              ]
            },
            {
              "id": "aa80108b-848a-40fd-8fd6-5c41468bdb00",
              "name": "Delete Moon Positive",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "Luna"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "820feada-1a46-4331-85d7-775d90727324",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "_lastExecutionId": "72501878-64e1-4cde-9178-e1784bb90fd6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ee9cb349-83f0-41d2-a8d6-0b8a3f96ff8e",
          "length": 41,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "47ab415e-90ac-4952-a43e-3bbd37e771fb",
          "scriptId": "c73a85a1-5cbe-4fb3-8dd1-4cb9dbcca7b8",
          "execution": "70e99897-37d6-4e82-bdcc-d9141c0bdce5"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Your test name",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:40)",
          "checksum": "e6f6636908e686f8ee23e131f7fac8c0",
          "id": "28ea7e15-f8cb-4687-a33a-5b01cb07e321",
          "timestamp": 1736963840497,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "23dddb58-5686-4bf9-9362-4aa6166ef521",
          "name": "Delete Moon Negative",
          "request": {
            "url": {
              "path": [
                "moon",
                "xyz"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c73a85a1-5cbe-4fb3-8dd1-4cb9dbcca7b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                  "});"
                ],
                "_lastExecutionId": "70e99897-37d6-4e82-bdcc-d9141c0bdce5"
              }
            }
          ]
        },
        "parent": {
          "id": "f914076a-280b-4e54-b89d-05df0bc0a153",
          "name": "Moon",
          "description": {
            "content": "tests related to moon deletion",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "23dddb58-5686-4bf9-9362-4aa6166ef521",
              "name": "Delete Moon Negative",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "xyz"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c73a85a1-5cbe-4fb3-8dd1-4cb9dbcca7b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      "pm.test(\"Your test name\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70e99897-37d6-4e82-bdcc-d9141c0bdce5"
                  }
                }
              ]
            },
            {
              "id": "aa80108b-848a-40fd-8fd6-5c41468bdb00",
              "name": "Delete Moon Positive",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "Luna"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "820feada-1a46-4331-85d7-775d90727324",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "_lastExecutionId": "72501878-64e1-4cde-9178-e1784bb90fd6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ee9cb349-83f0-41d2-a8d6-0b8a3f96ff8e",
          "length": 41,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "47ab415e-90ac-4952-a43e-3bbd37e771fb",
          "scriptId": "c73a85a1-5cbe-4fb3-8dd1-4cb9dbcca7b8",
          "execution": "70e99897-37d6-4e82-bdcc-d9141c0bdce5"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base url}}planetarium",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base url}}planetarium",
          "stack": "Error: getaddrinfo ENOTFOUND {{base url}}planetarium\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "4d474e7cdc02e79f4a0cb2849f5792ac",
          "id": "0f2ae044-52a0-4121-8b00-08edb7b46e3f",
          "timestamp": 1736963840573,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "aa80108b-848a-40fd-8fd6-5c41468bdb00",
          "name": "Delete Moon Positive",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "moon",
                "Luna"
              ],
              "host": [
                "{{base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "f6933e3b-f8b9-4d25-b32e-06caa913b80c",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base url}}planetarium",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "820feada-1a46-4331-85d7-775d90727324",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "febe2e3b-3a34-4b9e-8964-2a407c823e28",
          "length": 41,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "74d95da7-5c25-46de-8016-6eaf242fc9bc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 204",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)",
          "checksum": "17bcaf17c1e883f145f26757016cf99b",
          "id": "835a3e3e-62af-48c4-99fb-397ffb3f1976",
          "timestamp": 1736963840591,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 41,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "aa80108b-848a-40fd-8fd6-5c41468bdb00",
          "name": "Delete Moon Positive",
          "request": {
            "url": {
              "path": [
                "moon",
                "Luna"
              ],
              "host": [
                "{{Base url}}planetarium"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "820feada-1a46-4331-85d7-775d90727324",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "_lastExecutionId": "72501878-64e1-4cde-9178-e1784bb90fd6"
              }
            }
          ]
        },
        "parent": {
          "id": "f914076a-280b-4e54-b89d-05df0bc0a153",
          "name": "Moon",
          "description": {
            "content": "tests related to moon deletion",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "23dddb58-5686-4bf9-9362-4aa6166ef521",
              "name": "Delete Moon Negative",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "xyz"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c73a85a1-5cbe-4fb3-8dd1-4cb9dbcca7b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      "pm.test(\"Your test name\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.message).to.eql(\"Invalid moon name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70e99897-37d6-4e82-bdcc-d9141c0bdce5"
                  }
                }
              ]
            },
            {
              "id": "aa80108b-848a-40fd-8fd6-5c41468bdb00",
              "name": "Delete Moon Positive",
              "request": {
                "url": {
                  "path": [
                    "moon",
                    "Luna"
                  ],
                  "host": [
                    "{{Base url}}planetarium"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "820feada-1a46-4331-85d7-775d90727324",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "_lastExecutionId": "72501878-64e1-4cde-9178-e1784bb90fd6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "febe2e3b-3a34-4b9e-8964-2a407c823e28",
          "length": 41,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "74d95da7-5c25-46de-8016-6eaf242fc9bc",
          "scriptId": "820feada-1a46-4331-85d7-775d90727324",
          "execution": "72501878-64e1-4cde-9178-e1784bb90fd6"
        }
      }
    ],
    "error": null
  }
}